{"version":3,"sources":["../src/inferencers/headless/index.tsx","../src/create-inferencer/index.tsx","../src/utilities/get-fieldable-keys/index.ts","../src/utilities/pick-data-provider/index.tsx","../src/utilities/pick-inferred-field/index.ts","../src/utilities/prettier-format/index.ts","../src/utilities/pretty-spaces/index.ts","../src/field-inferencers/relation.ts","../src/utilities/remove-relation-suffix/index.ts","../src/utilities/pretty-string/index.ts","../src/utilities/translate-pretty-string/index.ts","../src/utilities/to-singular/index.ts","../src/utilities/to-plural/index.ts","../src/utilities/translate-action-title/index.ts","../src/utilities/translate-button-title/index.ts","../src/utilities/replace-exports/index.ts","../src/utilities/replace-imports/index.ts","../src/utilities/resource-from-inferred/index.ts","../src/utilities/component-name/index.ts","../src/utilities/jsx/index.ts","../src/utilities/prepare-live-code/index.ts","../src/utilities/remove-hidden-code/index.ts","../src/utilities/accessor/index.ts","../src/utilities/print-imports/index.ts","../src/utilities/is-id-key/index.ts","../src/utilities/get-option-label/index.ts","../src/utilities/no-op/index.ts","../src/utilities/get-variable-name/index.ts","../src/utilities/get-meta-props/index.ts","../src/utilities/id-quote-wrapper/index.ts","../src/utilities/deep-has-key/index.ts","../src/compose-inferencers/index.ts","../src/compose-transformers/index.ts","../src/field-inferencers/array.ts","../src/field-inferencers/boolean.ts","../src/field-inferencers/date.ts","../src/field-inferencers/email.ts","../src/field-inferencers/image.ts","../src/field-inferencers/nullish.ts","../src/field-inferencers/number.ts","../src/field-inferencers/object.ts","../src/field-inferencers/richtext.ts","../src/field-inferencers/text.ts","../src/field-inferencers/url.ts","../src/field-inferencers/index.ts","../src/field-transformers/basic-to-relation.ts","../src/field-transformers/image-by-key.ts","../src/field-transformers/relation-by-resource.ts","../src/field-transformers/relation-to-fieldable.ts","../src/field-transformers/index.ts","../src/components/live/index.tsx","../src/components/shared-code-viewer/index.tsx","../src/use-infer-fetch/index.tsx","../src/use-relation-fetch/index.ts","../src/inferencers/headless/error.tsx","../src/inferencers/headless/loading.tsx","../src/inferencers/headless/show.tsx","../src/inferencers/headless/list.tsx","../src/inferencers/headless/create.tsx","../src/inferencers/headless/edit.tsx"],"sourcesContent":["import React from \"react\";\nimport { useResource } from \"@refinedev/core\";\n\nimport { ShowInferencer } from \"./show.js\";\nimport { ListInferencer } from \"./list.js\";\nimport { CreateInferencer } from \"./create.js\";\nimport { EditInferencer } from \"./edit.js\";\n\nimport type { InferencerComponentProps } from \"../../types/index.js\";\n\nconst HeadlessInferencer: React.FC<InferencerComponentProps> = ({\n  action: actionFromProps,\n  id: idFromProps,\n  ...props\n}) => {\n  const { action, id } = useResource();\n\n  switch (actionFromProps ?? action) {\n    case \"show\":\n      return <ShowInferencer {...props} id={idFromProps ?? id} />;\n    case \"create\":\n      return <CreateInferencer {...props} id={idFromProps ?? id} />;\n    case \"edit\":\n      return <EditInferencer {...props} id={idFromProps ?? id} />;\n    default:\n      return <ListInferencer {...props} id={idFromProps ?? id} />;\n  }\n};\n\nexport { HeadlessInferencer };\nexport {\n  ListInferencer as HeadlessListInferencer,\n  renderer as HeadlessListRenderer,\n} from \"./list.js\";\nexport {\n  ShowInferencer as HeadlessShowInferencer,\n  renderer as HeadlessShowRenderer,\n} from \"./show.js\";\nexport {\n  EditInferencer as HeadlessEditInferencer,\n  renderer as HeadlessEditRenderer,\n} from \"./edit.js\";\nexport {\n  CreateInferencer as HeadlessCreateInferencer,\n  renderer as HeadlessCreateRenderer,\n} from \"./create.js\";\nexport * from \"../../types/index.js\";\n","import React, { useContext } from \"react\";\nimport { useResource, TranslationContext } from \"@refinedev/core\";\n\nimport type {\n  CreateInferencer,\n  InferencerComponentProps,\n  InferencerResultComponent,\n  InferField,\n} from \"../types\";\n\nimport { composeInferencers } from \"../compose-inferencers\";\nimport { composeTransformers } from \"../compose-transformers\";\n\nimport { defaultElements } from \"../field-inferencers\";\nimport { defaultTransformers } from \"../field-transformers\";\nimport { LiveComponent } from \"../components\";\nimport { useInferFetch } from \"../use-infer-fetch\";\nimport { useRelationFetch } from \"../use-relation-fetch\";\n\nimport { prepareLiveCode, componentName, removeHiddenCode } from \"../utilities\";\n\n/**\n * CreateInferencer is a function that creates a Inferencer component.\n *\n * Inferencer will handle the data fetching and the infering parts,\n * then it will invoke the `renderer` function to generate the code.\n * The generated code will be used to render the component by `react-live`.\n * Its required to havee`additionalScope` prop when using packages other than `react` and `@refinedev/core`.\n *\n * @param config - Inferencer configuration.\n * @param config.type - Infering type.\n * @param config.additionalScope - Additional scope for live code.\n * @param config.renderer - String renderer for Inferencer.\n * @param config.fieldTransformers - Field transformers.\n * @param config.customElements - Field inferencers.\n * @param config.codeViewerComponent - Code viewer component.\n * @param config.errorComponent - Error component.\n * @param config.loadingComponent - Loading component.\n */\nexport const createInferencer: CreateInferencer = ({\n  type,\n  additionalScope = [],\n  customElements = [],\n  fieldTransformers = [],\n  renderer,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  codeViewerComponent: CodeViewerComponent,\n}) => {\n  const infer = composeInferencers([...defaultElements, ...customElements]);\n  const transform = composeTransformers([\n    ...defaultTransformers,\n    ...fieldTransformers,\n  ]);\n\n  const Inferencer = ({\n    resourceName,\n    fieldTransformer,\n    hideCodeViewerInProduction,\n    meta,\n    id,\n  }: {\n    resourceName?: string;\n    hideCodeViewerInProduction?: boolean;\n    fieldTransformer?: InferencerComponentProps[\"fieldTransformer\"];\n    meta?: InferencerComponentProps[\"meta\"];\n    id?: string | number;\n  }) => {\n    const { resource, resources } = useResource(resourceName);\n    const { i18nProvider } = useContext(TranslationContext);\n\n    const { resource: resourceFromURL } = useResource();\n\n    const {\n      data: record,\n      datas: records,\n      loading: recordLoading,\n      initial: isInitialLoad,\n      error: inferError,\n    } = useInferFetch(type, resourceName ?? resource?.name, id, meta);\n\n    const inferSingleField = (\n      key: string,\n      value: any,\n      record: Record<string, unknown>,\n    ) => {\n      const inferResult = infer(key, value, record, infer, type);\n\n      if (inferResult) {\n        if (resource) {\n          const transformed = transform(\n            [inferResult] as InferField[],\n            resources,\n            resource,\n            record,\n            infer,\n            type,\n          );\n\n          const customTransformedFields = fieldTransformer\n            ? transformed.flatMap((field) => {\n                const result = fieldTransformer(field);\n\n                return result ? [result] : [];\n              })\n            : transformed;\n\n          return customTransformedFields?.[0];\n        }\n      }\n\n      return undefined;\n    };\n\n    const inferSingleRecord = (record: Record<string, unknown>) => {\n      const inferred = Object.keys(record)\n        .map((key) => {\n          const value = record[key];\n\n          const inferResult = inferSingleField(key, value, record);\n\n          return inferResult;\n        })\n        .filter(Boolean);\n\n      return inferred as InferField[];\n    };\n\n    const inferMultipleRecords = (records: Record<string, unknown>[]) => {\n      // infer each record\n      // get the most common one for each field\n      // also get the first occurence of the each most common field/key and construct a fresh record from them.\n      // return the fresh record and the inferred fields\n\n      const inferred = records.map((record) => inferSingleRecord(record));\n\n      const allUniqueKeys = records\n        .flatMap((record) => Object.keys(record))\n        .filter((key, index, self) => self.indexOf(key) === index);\n\n      const mostCommonRecord: Record<string, unknown> = {};\n\n      const mostCommonFields = allUniqueKeys.map((key) => {\n        const fields = inferred.map((fields) =>\n          fields.find((field) => field.key === key),\n        );\n\n        const mostCommonField = fields.reduce(\n          (acc, field, index) => {\n            if (!field) {\n              return acc;\n            }\n\n            const count = fields.filter(\n              (f) => f?.key === field.key && f?.type === field.type,\n            ).length;\n\n            if (count > acc.count) {\n              mostCommonRecord[key] = records[index][key];\n\n              return {\n                count,\n                field,\n              };\n            }\n\n            return acc;\n          },\n          { count: 0, field: undefined } as {\n            count: number;\n            field: undefined | InferField;\n          },\n        );\n\n        return mostCommonField.field;\n      });\n\n      const response = {\n        commonRecord: mostCommonRecord,\n        inferredFields: mostCommonFields,\n      };\n\n      return response;\n    };\n\n    const [rawResults, recordInUse]: [\n      InferField[],\n      Record<string, unknown> | undefined,\n    ] = React.useMemo(() => {\n      if (records && (type === \"list\" || type === \"create\")) {\n        const inferred = inferMultipleRecords(records);\n\n        return [inferred.inferredFields as InferField[], inferred.commonRecord];\n      }\n      if (record) {\n        const inferred = Object.keys(record)\n          .map((key) => {\n            const value = record[key];\n\n            const inferResult = infer(key, value, record, infer, type);\n\n            return inferResult;\n          })\n          .filter(Boolean);\n\n        if (resource) {\n          const transformed = transform(\n            inferred as InferField[],\n            resources,\n            resource,\n            record,\n            infer,\n            type,\n          );\n\n          const customTransformedFields = fieldTransformer\n            ? transformed.flatMap((field) => {\n                const result = fieldTransformer(field);\n\n                return result ? [result] : [];\n              })\n            : transformed;\n\n          return [customTransformedFields, record];\n        }\n\n        return [[], record];\n      }\n\n      return [[], undefined];\n    }, [record, records, resources, resource, fieldTransformer]);\n\n    const {\n      fields: results,\n      loading: relationLoading,\n      // initial: relationInitial,\n    } = useRelationFetch({\n      record: recordInUse,\n      fields: rawResults,\n      infer,\n      meta,\n    });\n\n    const clearedFields = React.useMemo(() => {\n      const cleanFields: InferField[] = [];\n\n      results.forEach((f, idx, arr) => {\n        if (f.resource) {\n          if (\n            cleanFields.findIndex(\n              (el) => el.resource?.name === f.resource?.name,\n            ) > -1\n          ) {\n            return;\n          }\n          const duplicates = arr.filter((field, index) => {\n            if (index !== idx) {\n              const currentFieldHasResource = f.resource;\n              const fieldHasResource = field.resource;\n              const hasAnyIdentifier =\n                field.resource?.identifier || f.resource?.identifier;\n              const isSameResource = hasAnyIdentifier\n                ? field.resource?.identifier === f.resource?.identifier\n                : field.resource?.name === f.resource?.name;\n\n              return (\n                currentFieldHasResource && fieldHasResource && isSameResource\n              );\n            }\n            return false;\n          });\n          if (duplicates.length > 0) {\n            if (type === \"create\" || type === \"edit\") {\n              let toPush: InferField | undefined = undefined;\n\n              [f, ...duplicates].find((el) => {\n                if (el.fieldable !== true && toPush === undefined) {\n                  toPush = el;\n                }\n              });\n              if (toPush) {\n                cleanFields.push(toPush);\n              } else {\n                cleanFields.push(f);\n              }\n            } else {\n              let toPush: InferField | undefined = undefined;\n\n              [f, ...duplicates].find((el) => {\n                if (el.fieldable !== false && toPush === undefined) {\n                  toPush = el;\n                }\n              });\n\n              if (toPush) {\n                cleanFields.push(toPush);\n              } else {\n                cleanFields.push(f);\n              }\n            }\n          } else {\n            cleanFields.push(f);\n          }\n        } else {\n          cleanFields.push(f);\n        }\n      });\n\n      return cleanFields;\n    }, [results, type]);\n\n    const code = React.useMemo(() => {\n      if (!recordLoading && !relationLoading && !isInitialLoad && resource) {\n        return renderer({\n          resource,\n          resources,\n          fields: clearedFields,\n          infer,\n          meta,\n          isCustomPage: resource.name !== resourceFromURL?.name,\n          id,\n          i18n: !!i18nProvider,\n        });\n      }\n      return \"\";\n    }, [resource, resources, clearedFields, recordLoading, relationLoading]);\n\n    const hiddenCodeViewer =\n      process.env.NODE_ENV !== \"development\" && hideCodeViewerInProduction;\n\n    return (\n      <>\n        {LoadingComponent && (recordLoading || relationLoading) && (\n          <LoadingComponent />\n        )}\n        {!recordLoading && !relationLoading && (\n          <>\n            <LiveComponent\n              fetchError={\n                !recordLoading && inferError\n                  ? inferError\n                  : !recordLoading && !isInitialLoad && !record\n              }\n              code={prepareLiveCode(\n                code,\n                componentName(\n                  resource?.meta?.label ??\n                    resource?.options?.label ??\n                    resource?.label ??\n                    resource?.name ??\n                    \"Resource\",\n                  type,\n                ),\n              )}\n              errorComponent={ErrorComponent}\n              additionalScope={additionalScope}\n            />\n            {typeof CodeViewerComponent !== \"undefined\" && !hiddenCodeViewer ? (\n              <CodeViewerComponent\n                code={removeHiddenCode(code)}\n                loading={recordLoading || relationLoading}\n              />\n            ) : null}\n          </>\n        )}\n      </>\n    );\n  };\n\n  const InferencerComponent: InferencerResultComponent = ({\n    name,\n    resource,\n    fieldTransformer,\n    meta,\n    hideCodeViewerInProduction,\n    id,\n  }) => {\n    const { resource: resourceItem } = useResource(resource ?? name);\n\n    const key = `${\n      resourceItem?.identifier ?? resourceItem?.name\n    }-${type}-${id}`;\n\n    return (\n      <Inferencer\n        hideCodeViewerInProduction={hideCodeViewerInProduction}\n        fieldTransformer={fieldTransformer}\n        resourceName={resource ?? name}\n        meta={meta ?? {}}\n        key={key}\n        id={id}\n      />\n    );\n  };\n\n  return InferencerComponent;\n};\n","const urlLikeKeyRegexp = /(image|photo|avatar|url|logo|cover|thumbnail|icon)/i;\nconst nameLikeRegexp = /^(\\w|\\d|_|-|)*?(name|label){1}$/i;\n\n/**\n * Returns a list of keys that are likely to be fieldable.\n * @example getFieldableKeys(\"user\", { id: 1, name: \"John\" }) === \"name\"\n */\nexport const getFieldableKeys = (\n  key: string,\n  data: Record<string, unknown>,\n): string | string[] | undefined => {\n  const fieldableProperties = [\n    \"name\",\n    \"label\",\n    \"title\",\n    \"count\",\n    \"content\",\n    \"username\",\n    \"nickname\",\n    \"login\",\n    \"firstName\",\n    \"lastName\",\n    \"url\",\n  ];\n\n  const objectKeys = Object.keys(data);\n\n  const nameLikeKeys = objectKeys.filter((k) => nameLikeRegexp.test(k));\n\n  fieldableProperties.push(...nameLikeKeys);\n\n  if (urlLikeKeyRegexp.test(key)) {\n    fieldableProperties.unshift(\"url\");\n  }\n\n  const firstAvailable = fieldableProperties.find(\n    (fkey) => fkey in data && !!data[fkey],\n  );\n\n  if (firstAvailable) {\n    if (firstAvailable === \"firstName\" && \"lastName\" in data) {\n      return [\"firstName\", \"lastName\"];\n    }\n\n    return firstAvailable;\n  }\n\n  return undefined;\n};\n","import type { IResourceItem } from \"@refinedev/core\";\nimport { pickNotDeprecated } from \"@refinedev/core\";\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n */\nexport function pickDataProvider(\n  resourceName?: string,\n  dataProviderName?: string,\n  resources?: IResourceItem[],\n) {\n  if (dataProviderName) {\n    return dataProviderName;\n  }\n\n  const resource = resources?.find((item) => item.name === resourceName);\n\n  const meta = pickNotDeprecated(resource?.meta, resource?.options);\n  if (meta?.dataProviderName) {\n    return meta.dataProviderName;\n  }\n\n  return \"default\";\n}\n\n/**\n * Picks the data provider for the given resource. Which can be overridden by the resource itself.\n * This is a simpler version of the above function which works with the resource item instead of the resource name and additional arguments.\n */\nexport const dataProviderFromResource = (resource?: IResourceItem) => {\n  return resource?.options?.dataProviderName;\n};\n","import type { InferField } from \"../../types\";\n\n/**\n * Each field inferencer will run with every property of a record and output a result.\n * In these outputs, one with the highest priority will be picked as the inferred field.\n */\nexport const pickInferredField = (\n  inferredFields: Array<InferField | null | false>,\n): InferField | null => {\n  // filter out null and false values and sort by priority then return the first one\n  // priority is a number, the higher the number the higher the priority\n  // if there is no priority, it will be 0\n  const field = ([...inferredFields].filter(Boolean) as Array<InferField>).sort(\n    (a, b) => (b.priority || 0) - (a.priority || 0),\n  )[0];\n\n  if (!field) {\n    return null;\n  }\n\n  return field;\n};\n","import prettier from \"prettier/standalone\";\nimport tsParser from \"prettier/parser-typescript\";\n\n/**\n * Standalone prettier formatter with typescript parser\n * to format the generated code.\n */\nexport const prettierFormat = (code: string) => {\n  try {\n    const formatted = prettier.format(code, {\n      parser: \"typescript\",\n      plugins: [tsParser],\n      arrowParens: \"always\",\n      trailingComma: \"all\",\n      semi: true,\n      tabWidth: 4,\n      printWidth: 80,\n    });\n\n    return formatted;\n  } catch (error) {\n    console.warn(\"Formatting error in inferencer\", error);\n    return code;\n  }\n};\n","/**\n * This helper removes the recurring spaces from the code.\n */\nexport const prettySpaces = (content: string): string => {\n  return content.replace(/ {2,}/g, \" \").replace(/\\n{2,}/g, \"\\n\");\n};\n","import type { FieldInferencer } from \"../types\";\n\nexport const relationRegexp = /(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\\[\\])?$/;\n\nexport const relationInfer: FieldInferencer = (key, value) => {\n  const isRelation = relationRegexp.test(key);\n  const isBasicValue = typeof value === \"string\" || typeof value === \"number\";\n  const isBasicArray =\n    Array.isArray(value) &&\n    value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n  if ((isRelation && isBasicValue) || (isRelation && isBasicArray)) {\n    return {\n      key,\n      relation: true,\n      multiple: isBasicArray,\n      type: \"relation\",\n      priority: 1,\n    };\n  }\n\n  return false;\n};\n","import { relationRegexp } from \"../../field-inferencers/relation\";\n\n/**\n * Removes the relation suffix from a string.\n * @example removeRelationSuffix(\"category_id\") === \"category\"\n */\nexport const removeRelationSuffix = (key: string) => {\n  return key.replace(relationRegexp, \"\");\n};\n","import { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * This helper will prettify the string.\n */\nexport const prettyString = (str: string) => {\n  const clean = removeRelationSuffix(str);\n  // Convert camelCase to camel Case\n  const camelCase = clean.replace(/([a-z])([A-Z])/g, \"$1 $2\");\n  // Convert snake_case to snake case\n  const snakeCase = camelCase.replace(/_/g, \" \");\n  // Convert kebab-case to kebab case\n  const kebabCase = snakeCase.replace(/-/g, \" \");\n  // Capitalize the string\n  const capitalized = kebabCase\n    .split(\" \")\n    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))\n    .join(\" \");\n\n  return capitalized;\n};\n","import type { IResourceItem } from \"@refinedev/core\";\nimport { prettyString } from \"../pretty-string\";\nimport type { InferField } from \"../../types\";\n\nexport const translatePrettyString = (payload: {\n  resource: IResourceItem;\n  field: InferField;\n  i18n?: boolean;\n  noQuotes?: boolean;\n  noBraces?: boolean;\n}) => {\n  const { resource, field, i18n } = payload;\n\n  if (i18n) {\n    const translate = `translate(\"${resource.name}.fields.${field.key}\")`;\n\n    if (payload.noBraces) {\n      return `${translate}`;\n    }\n    return `{${translate}}`;\n  }\n\n  const prettedString = prettyString(field.key);\n  if (payload.noQuotes) {\n    return prettedString;\n  }\n\n  return `\"${prettedString}\"`;\n};\n","import pluralize from \"pluralize\";\n\nexport const toSingular = (str = \"\") => {\n  return pluralize.isSingular(str) ? str : pluralize.singular(str);\n};\n","import pluralize from \"pluralize\";\n\nexport const toPlural = (str = \"\") => {\n  return pluralize.isPlural(str) ? str : pluralize.plural(str);\n};\n","import type { IResourceItem } from \"@refinedev/core\";\nimport { prettyString } from \"../pretty-string\";\nimport { toSingular } from \"../to-singular\";\nimport { toPlural } from \"../to-plural\";\n\nexport const translateActionTitle = (payload: {\n  resource: IResourceItem;\n  action: \"list\" | \"create\" | \"edit\" | \"show\";\n  i18n?: boolean;\n  noBraces?: boolean;\n}) => {\n  const { resource, action, i18n, noBraces } = payload;\n\n  if (i18n) {\n    const translateKey = `translate(\"${resource.name}.titles.${action}\")`;\n    if (noBraces) {\n      return translateKey;\n    }\n    return `{${translateKey}}`;\n  }\n\n  if (action === \"list\") {\n    return prettyString(\n      toPlural(resource.label ?? resource?.meta?.label ?? resource.name),\n    );\n  }\n\n  return `${prettyString(toSingular(resource.name))} ${prettyString(action)}`;\n};\n","import { prettyString } from \"../pretty-string\";\n\nexport const translateButtonTitle = (payload: {\n  action: \"list\" | \"create\" | \"edit\" | \"show\" | \"save\" | \"delete\";\n  i18n?: boolean;\n  noQuotes?: boolean;\n}) => {\n  const { action, i18n, noQuotes } = payload;\n\n  if (i18n) {\n    return `{translate(\"buttons.${action}\")}`;\n  }\n\n  if (noQuotes) {\n    return prettyString(action);\n  }\n  return `\"${prettyString(action)}\"`;\n};\n","/**\n * `react-live` does not support `export` statements in the code.\n * This function will remove the `export` statements from the code.\n */\nexport const replaceExports = (code: string) => {\n  // remove export statements from the code but keep the variables\n  const newCode = code.replace(\n    /export\\s+(const|let|var|type|interface|function|class)\\s+(\\w+)\\s*(=|:)\\s*/g,\n    \"$1 $2 = \",\n  );\n\n  // remove default exports, check line by line, lines can be indented so ignore the tabs and spaces at the beginning\n  const lines = newCode.split(\"\\n\");\n  const newLines = lines.filter(\n    (line) => !line.trim().startsWith(\"export default\"),\n  );\n\n  return newLines.join(\"\\n\");\n};\n","import { prettySpaces } from \"../pretty-spaces\";\n\nconst packageRegex =\n  /import(?:(?:(?:[ \\n\\t]+([^ *\\n\\t\\{\\},]+)[ \\n\\t]*(?:,|[ \\n\\t]+))?([ \\n\\t]*\\{(?:[ \\n\\t]*[^ \\n\\t\"'\\{\\}]+[ \\n\\t]*,?)+\\})?[ \\n\\t]*)|[ \\n\\t]*\\*[ \\n\\t]*as[ \\n\\t]+([^ \\n\\t\\{\\}]+)[ \\n\\t]+)from[ \\n\\t]*(?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst sideEffectRegex = /import[ \\n\\t](?:['\"])([^'\"\\n]+)(?:['\"])(?:;?)/g;\n\nconst nameChangeRegex = /((?:\\w|\\s|_)*)( as )((?:\\w|\\s|_)*)( |,)?/g;\n\n/**\n * This function will replace the imports in the code since `react-live` does not support `import` statements.\n * `modules` is an object with keys as `package name` and values as `variable name`.\n */\nexport const replaceImports = (\n  content: string,\n  modules: Record<string, string> = {},\n): string => {\n  const matches = content.matchAll(packageRegex);\n\n  const imports = new Set();\n\n  // @ts-ignore\n  for (const match of matches) {\n    const [, defaultImport, namedImports, namespaceImport, packageName] = match;\n\n    if (packageName in modules) {\n      const importName = modules[packageName];\n\n      /**\n       * React and its exports are already available in the scope of the code.\n       * Restructuring them in import statements will cause errors.\n       * To avoid that, we are not replacing the import statements for React.\n       * This way, generated code can have \"react\" imports without any errors.\n       */\n      if (packageName === \"react\") {\n        continue;\n      }\n\n      if (defaultImport) {\n        imports.add(`const { default: ${defaultImport} } = ${importName};`);\n      }\n\n      if (namedImports) {\n        imports.add(\n          `const${namedImports.replace(\n            nameChangeRegex,\n            \"$1: $3$4\",\n          )} = ${importName};`,\n        );\n      }\n\n      if (namespaceImport) {\n        imports.add(`const ${namespaceImport} = ${importName};`);\n      }\n    }\n  }\n\n  return prettySpaces(`\n    ${Array.from(imports).join(\"\\n\")}\n    ${content.replace(packageRegex, \"\").replace(sideEffectRegex, \"\")}\n    `);\n};\n","import pluralize from \"pluralize\";\nimport type { IResourceItem } from \"@refinedev/core\";\n\nimport type { InferField } from \"../../types\";\n\nimport { removeRelationSuffix } from \"../remove-relation-suffix\";\n\n/**\n * Checks if the given property can be relation by checking the existing resources.\n */\nexport const resourceFromInferred = (\n  field: InferField | false | null,\n  resources: IResourceItem[],\n): IResourceItem | undefined => {\n  if (!field) {\n    return undefined;\n  }\n\n  const resource = resources.find((el) => {\n    const stripped = removeRelationSuffix(field.key);\n\n    return (\n      el.name === stripped ||\n      el.name ===\n        (pluralize.isPlural(stripped)\n          ? stripped\n          : pluralize.plural(stripped)) ||\n      el.name ===\n        (pluralize.isSingular(stripped)\n          ? stripped\n          : pluralize.singular(stripped))\n    );\n  });\n\n  return resource;\n};\n","import pluralize from \"pluralize\";\nimport { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the component name based on the resource name and inferencer type.\n * @example componentName(\"users\", \"list\") === \"UserList\"\n */\nexport const componentName = (\n  resourceName: string,\n  type: \"list\" | \"show\" | \"edit\" | \"create\",\n  fallbackResourceName = \"Inferred\",\n) => {\n  // replace all non-alphanumeric characters with a space\n  const sanitized = resourceName.replace(/[^a-zA-Z0-9]/g, \" \");\n  // convert to singular\n  const singular = pluralize.singular(sanitized);\n  // prettify the string without spaces\n  const prettified = prettyString(singular).replace(/ /g, \"\");\n  // if prettified is empty, return the fallbackResourceName\n  const resourceComponentName = prettified || fallbackResourceName;\n  // get pretty type name\n  const prettyType = type.charAt(0).toUpperCase() + type.slice(1);\n\n  // if resourceName is not starting with an alphabetical character, return Type + resourceName\n  // e.g. \"123users\" => \"List123Users\"\n  if (!/^[a-zA-Z]/.test(resourceComponentName)) {\n    return `${prettyType}${resourceComponentName}`;\n  }\n  // e.g. \"users\" => \"UserList\"\n  return `${resourceComponentName}${prettyType}`;\n};\n","const handleExpression = (expression: unknown) => {\n  if (!expression) {\n    return \"\";\n  }\n\n  if (Array.isArray(expression)) {\n    return expression.join(\"\");\n  }\n\n  if (typeof expression === \"string\") {\n    return expression;\n  }\n\n  if (typeof expression === \"object\") {\n    return expression.toString();\n  }\n\n  if (typeof expression === \"function\") {\n    return expression.toString();\n  }\n\n  if (typeof expression === \"number\") {\n    return String(expression);\n  }\n\n  if (typeof expression === \"boolean\" && expression) {\n    return \"true\";\n  }\n\n  return expression;\n};\n\n/**\n * This is a hacky helper to allow syntax highlighting to work in the template literals. (`renderer` function in inferencers)\n * Additionally, it parses expressions like jsx does.\n */\nexport const jsx = (\n  strings: TemplateStringsArray,\n  ...expressions: unknown[]\n) => {\n  const parsed = strings.reduce(\n    (result, currentString, i) =>\n      `${result}${currentString}${handleExpression(expressions[i])}`,\n    \"\",\n  );\n\n  return parsed.trim();\n};\n","/**\n * Code will be generated to be ready to copy and paste into a live environment.\n * But, `react-live` with `noInline={true}` will not work with this code and require `render` method to be called with the component.\n * This function will use the component name and the code and append the `render` method to the code.\n */\nexport const prepareLiveCode = (code?: string, componentName?: string) => {\n  return `\n    ${code ?? \"\"}\n    \n    render(typeof ${componentName} !== \"undefined\" ? <${componentName} /> : <></>);\n    `;\n};\n","export const removeHiddenCode = (code?: string) => {\n  // hidden blocks are wrapped in `/* hidden-start */` and `/* hidden-end */`\n  // these blocks can present multiple times in the code\n\n  return code?.replace(\n    /(\\/\\* hidden-start \\*\\/)(.|\\n)*?(\\/\\* hidden-end \\*\\/)/g,\n    \"\",\n  );\n};\n","import type { InferField } from \"../../types\";\n\nconst dotAccessableRegex = /^[a-zA-Z_$][a-zA-Z_$0-9]*$/;\n\nexport const shouldDotAccess = (property: string) => {\n  return dotAccessableRegex.test(property);\n};\n\nfunction accessorSingle(variableName: string, key?: string, accessor?: string) {\n  let base = `${variableName}`;\n\n  if (key) {\n    base += \"?.\";\n    if (shouldDotAccess(key)) {\n      base += key;\n    } else {\n      base += `['${key}']`;\n    }\n  }\n\n  if (accessor) {\n    base += \"?.\";\n    if (shouldDotAccess(accessor)) {\n      base += accessor;\n    } else {\n      base += `['${accessor}']`;\n    }\n  }\n\n  return base;\n}\n\nfunction accessorMultiple(variable: string, key?: string, accessor?: string[]) {\n  const all = (accessor ?? []).map((a) => accessorSingle(variable, key, a));\n\n  return all;\n}\n\n/**\n * Returns a string that can be used to access the given field.\n * @example accessor(\"myVar\", \"some\", \"thing\") === \"myVar?.some?.thing\"\n * @example accessor(\"myVar\", \"so-me\", th.ing\") === \"myVar?.['so-me']['th.ing']\"\n */\nexport const accessor = (\n  variable: string,\n  key?: string,\n  accessor?: string | string[],\n  joiner: string | false = ' + \" \" + ',\n): string => {\n  if (Array.isArray(accessor)) {\n    if (joiner) {\n      return accessorMultiple(variable, key, accessor).join(joiner);\n    }\n    return accessorSingle(variable, key, accessor[0]);\n  }\n  return accessorSingle(variable, key, accessor);\n};\n\nexport const dotAccessor = (\n  variable: string,\n  key?: string,\n  accessor?: string | string[],\n) => {\n  let str = variable;\n\n  if (key) {\n    str += `.${key}`;\n  }\n\n  if (accessor) {\n    if (Array.isArray(accessor)) {\n      str += `.${accessor[0]}`;\n    } else {\n      str += `.${accessor}`;\n    }\n  }\n\n  return str;\n};\n\nexport const getAccessorKey = (field: InferField) => {\n  return Array.isArray(field.accessor) || field.multiple\n    ? `accessorKey: \"${field.key}\"`\n    : field.accessor\n      ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n      : `accessorKey: \"${field.key}\"`;\n};\n","import type { ImportElement } from \"../../types\";\n\nexport const printImports = (imports: Array<ImportElement>) => {\n  const byModule = imports.reduce(\n    (acc, [element, module, isDefault]) => {\n      if (!acc[module]) {\n        acc[module] = [] as Array<\n          string | [variable: string, isDefault?: boolean]\n        >;\n      }\n\n      if (!acc[module].includes(element)) {\n        if (isDefault) {\n          acc[module].push([element, true]);\n        } else {\n          acc[module].push(element);\n        }\n      }\n\n      return acc;\n    },\n    {} as Record<\n      string,\n      Array<string | [variable: string, isDefault?: boolean]>\n    >,\n  );\n\n  const lines = Object.entries(byModule).map(([module, elements]) => {\n    const defaultImport = elements.find((e) => Array.isArray(e) && e[1]);\n    const named = elements.filter((e) => typeof e === \"string\");\n    const defaultStr = defaultImport ? `${defaultImport[0]}` : \"\";\n    const namedStr = named.length ? `{ ${named.join(\", \")} }` : \"\";\n    return `import ${defaultStr}${\n      defaultStr && namedStr ? \", \" : \"\"\n    }${namedStr} from \"${module}\";`;\n  });\n\n  return lines;\n};\n","const identifierRegexp = /^id$/i;\n\nexport const isIDKey = (key: string): boolean => identifierRegexp.test(key);\n","import type { InferField } from \"../../types\";\n\nexport const getOptionLabel = (field: InferField) => {\n  if (!field.relationInfer) return \"\";\n\n  if (field.relationInfer?.accessor) {\n    if (Array.isArray(field.relationInfer.accessor)) {\n      return `optionLabel: \"${field.relationInfer.accessor[0]}\",`;\n    }\n    if (field.relationInfer.accessor !== \"title\") {\n      return `optionLabel: \"${field.relationInfer.accessor}\",`;\n    }\n    return \"\";\n  }\n\n  return \"\";\n};\n","export const noOp = (arg1: any) => {};\n","import { prettyString } from \"../pretty-string\";\n\n/**\n * Returns the valid variable name for the given string and the given suffixOrPrefix.\n * @example getVariableName(\"user\", \"data\") === \"usersData\"\n * @example getVariableName(\"1234\", \"data\") === \"data1234\"\n * @example getVariableName(\"users-account\", \"selectProps\") === \"usersAccountSelectProps\"\n */\nexport const getVariableName = (fieldKey: string, suffixOrPrefix = \"\") => {\n  // if fieldKey is number, return with prefix\n  // e.g. (12345, Data) => \"data12345\"\n  if (Number.isInteger(Number(fieldKey))) {\n    const lowerCaseFirstLetter =\n      suffixOrPrefix.charAt(0).toLowerCase() + suffixOrPrefix.slice(1);\n    return lowerCaseFirstLetter + fieldKey;\n  }\n\n  // if fieldKey is start with numbers, replace the numbers with empty string\n  // e.g. 123users => \"users\"\n  const fieldKeyWithoutNumbers = fieldKey.replace(/^\\d+/, \"\");\n\n  // if fieldKeyWithoutNumbers has invalid characters, replace them with \"-\"\n  // e.g. \"users/account\" => \"users-account\"\n  const fieldKeyWithoutInvalidCharacters = fieldKeyWithoutNumbers.replace(\n    /[^a-zA-Z0-9]/g,\n    \"-\",\n  );\n\n  // Convert to PascalCase\n  const prettyPluralVariableName = prettyString(\n    fieldKeyWithoutInvalidCharacters,\n  ).replace(/ /g, \"\");\n\n  const variableName = `${\n    prettyPluralVariableName.charAt(0).toLowerCase() +\n    prettyPluralVariableName.slice(1)\n  }${suffixOrPrefix.charAt(0).toUpperCase() + suffixOrPrefix.slice(1)}`;\n\n  return variableName;\n};\n","import type { InferencerComponentProps } from \"../../types\";\n\nexport type Action = keyof NonNullable<\n  InferencerComponentProps[\"meta\"]\n>[string];\n\n/**\n * @returns meta props for a given identifier by actions\n * @description Searchs actions in meta[identifier] and returns first founded meta[identifier][action] and disgards the rest\n * if no action is found, returns meta[identifier][\"default\"]\n *\n * @param identifier\n * @param meta\n * @param actions keys of meta[identifier]. actions order is important. first founded action will be returned from meta[`identifier`]\n */\nexport const getMetaProps = (\n  identifier?: string,\n  meta?: InferencerComponentProps[\"meta\"],\n  actions?: Action[],\n) => {\n  if (!(meta && actions && identifier)) return \"\";\n  if (!Object.keys(meta).length) return \"\";\n\n  const metaByIdentifier = identifier ? meta[identifier] : {};\n  const metaByActions: string[] = [];\n\n  // we need to return first founded action in metaByIdentifier and disgard the rest.\n  const firstFoundedActionInMeta = actions.find(\n    (action) => metaByIdentifier[action],\n  );\n\n  // if actions is not found, we need to return metaByIdentifier[\"default\"]\n  const metaByAction =\n    metaByIdentifier?.[firstFoundedActionInMeta || \"default\"];\n\n  // if neither actions or default is found, we need to return empty string\n  if (!metaByAction) {\n    return \"\";\n  }\n\n  const { gqlQuery, gqlMutation, ...metaValueByAction } = metaByAction;\n\n  // add founded action's all meta values besides gqlQuery, gqlMutation.\n  Object.keys(metaValueByAction).forEach((key) => {\n    metaByActions.push(`${key}: ${JSON.stringify(metaValueByAction[key])}`);\n  });\n\n  // manipulate and add gqlQuery\n  if (gqlQuery) {\n    metaByActions.push(`gqlQuery: gql\\`${gqlQuery?.loc?.source?.body}\\``);\n  }\n\n  // manipulate and add gqlMutation\n  if (gqlMutation) {\n    metaByActions.push(`gqlMutation: gql\\`${gqlMutation?.loc?.source?.body}\\``);\n  }\n\n  const metaValues = metaByActions.join(\",\");\n  if (metaValues.length) {\n    return `meta:{${metaValues}}`;\n  }\n\n  return \"\";\n};\n\nexport const pickMeta = (\n  identifier?: string,\n  meta?: InferencerComponentProps[\"meta\"],\n  actions?: Action[],\n) => {\n  if (meta && actions && identifier) {\n    const metaValues = identifier ? meta[identifier] : {};\n\n    const actionsToCheck = [...actions, \"default\"] as Action[];\n\n    const metaValue = actionsToCheck.reduce(\n      (acc, action) => {\n        return acc ?? metaValues?.[action];\n      },\n      undefined as Record<string, unknown> | undefined,\n    );\n\n    if (metaValue) {\n      return metaValue;\n    }\n  }\n  return undefined;\n};\n","/**\n * If the `id` is a string, it will be wrapped in quotes.\n */\nexport const idQuoteWrapper = (\n  id: string | number | undefined,\n): string | number | undefined => {\n  if (id === undefined) return id;\n  if (typeof id === \"string\") return `\"${id}\"`;\n\n  return id;\n};\n","/**\n * traverse an object and check if it has a given key\n * @param obj the object to traverse\n * @param key the key to check for in the object. can be an array of keys. e.g. ['foo', 'bar']). It will check for 'foo' or 'bar' in the object\n */\nexport const deepHasKey = (obj: Record<string, any>, keys: string[]) => {\n  // traverse all keys in the object\n  for (const k in obj) {\n    // if the key is in the object, return true\n    if (keys.includes(k)) {\n      return true;\n    }\n\n    // if the value is an object, recurse into it\n    if (typeof obj[k] === \"object\" && obj[k] !== null) {\n      if (deepHasKey(obj[k], keys)) {\n        return true;\n      }\n    }\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\nimport { pickInferredField } from \"../utilities\";\n\n/**\n * Compose multiple field inferencers into one\n * @param inferencers The inferencer functions to compose\n */\nexport const composeInferencers = (\n  inferencers: Array<FieldInferencer>,\n): FieldInferencer => {\n  const fieldInferencer: FieldInferencer = (\n    key,\n    value,\n    record,\n    infer = fieldInferencer,\n    type,\n  ) => {\n    const inferences = inferencers.map((inferencer) =>\n      inferencer(key, value, record, infer, type),\n    );\n    const picked = pickInferredField(inferences);\n\n    return picked;\n  };\n\n  return fieldInferencer;\n};\n","import type { FieldTransformer } from \"../types\";\n\n/**\n * Compose multiple field transformers into one\n * @param transformers The transformer functions to compose\n */\nexport const composeTransformers = (\n  transformers: Array<FieldTransformer>,\n): FieldTransformer => {\n  const fieldTransformer: FieldTransformer = (\n    fields,\n    resources,\n    resource,\n    record,\n    infer,\n    type,\n  ) => {\n    return transformers.reduce((acc, transformer) => {\n      return transformer(acc, resources, resource, record, infer, type);\n    }, fields);\n  };\n\n  return fieldTransformer;\n};\n","import type { FieldInferencer, InferType } from \"../types\";\n\nexport const arrayInfer: FieldInferencer = (\n  key,\n  value,\n  record,\n  infer,\n  type,\n) => {\n  const isArray = Array.isArray(value);\n  const isBasicArray =\n    Array.isArray(value) &&\n    value.every((v) => typeof v === \"string\" || typeof v === \"number\");\n\n  if (isArray) {\n    if (!isBasicArray) {\n      const inferredInnerType = infer(key, value[0], record, infer, type);\n      if (inferredInnerType) {\n        return {\n          ...inferredInnerType,\n          key,\n          multiple: true,\n          priority: 1,\n        };\n      }\n      return false;\n    }\n    const basicType = infer(key, value[0], record, infer, type) || {\n      type: \"string\" as InferType,\n    };\n\n    return {\n      key,\n      multiple: true,\n      priority: 1,\n      type: basicType?.type,\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nexport const booleanInfer: FieldInferencer = (key, value) => {\n  const isBoolean = typeof value === \"boolean\";\n\n  if (isBoolean) {\n    return {\n      key,\n      type: \"boolean\",\n    };\n  }\n\n  return false;\n};\n","import dayjs from \"dayjs\";\nimport type { FieldInferencer } from \"../types\";\n\nconst dateSuffixRegexp = /(_at|_on|At|On|AT|ON)(\\[\\])?$/;\n\nconst dateSeparators = [\"/\", \":\", \"-\", \".\"];\n\nexport const dateInfer: FieldInferencer = (key, value) => {\n  const isDateField =\n    dateSuffixRegexp.test(key) && dayjs(value as string).isValid();\n\n  const isValidDateString = typeof value === \"string\" && dayjs(value).isValid();\n\n  const hasDateSeparator =\n    typeof value === \"string\" && dateSeparators.some((s) => value.includes(s));\n\n  if (hasDateSeparator && (isDateField || isValidDateString)) {\n    return {\n      key,\n      type: \"date\",\n      priority: 1,\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nconst emailRegexp =\n  /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nexport const emailInfer: FieldInferencer = (key, value) => {\n  const isValidEmail = typeof value === \"string\" && emailRegexp.test(value);\n\n  if (isValidEmail) {\n    return {\n      key,\n      type: \"email\",\n      priority: 1,\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nconst imageRegexp = /\\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i;\n\nexport const imageInfer: FieldInferencer = (key, value) => {\n  const isImageURI = typeof value === \"string\" && imageRegexp.test(value);\n\n  if (isImageURI) {\n    return {\n      key,\n      type: \"image\",\n      priority: 2,\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nexport const nullishInfer: FieldInferencer = (key, value) => {\n  const isUndefined = typeof value === \"undefined\";\n  const isNull = value === null;\n\n  if (isUndefined || isNull) {\n    return null;\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nexport const numberInfer: FieldInferencer = (key, value) => {\n  const isNonEmptyString = typeof value === \"string\" && value.length > 0;\n  const isNotNaN = !Number.isNaN(Number(value));\n\n  const isNumericString = isNonEmptyString && isNotNaN;\n  const isNumber = typeof value === \"number\";\n\n  const isNumeric = isNumericString || isNumber;\n\n  if (isNumeric) {\n    return {\n      key,\n      type: \"number\",\n    };\n  }\n\n  return false;\n};\n","import { getFieldableKeys } from \"../utilities\";\nimport type { FieldInferencer } from \"../types\";\n\nconst idPropertyRegexp = /id$/i;\n\nexport const objectInfer: FieldInferencer = (\n  key,\n  value,\n  record,\n  infer,\n  type,\n) => {\n  const isNotNull = value !== null;\n  const isNotArray = !Array.isArray(value);\n  const isObject = typeof value === \"object\";\n\n  if (isNotNull && isNotArray && isObject) {\n    const onlyHasId =\n      Object.keys(value).length === 1 &&\n      idPropertyRegexp.test(Object.keys(value)[0]);\n\n    const hasId = Object.keys(value).some((k) => idPropertyRegexp.test(k));\n\n    if (onlyHasId) {\n      return {\n        key,\n        type: \"relation\",\n        relation: true,\n        accessor: \"id\",\n        priority: 1,\n      };\n    }\n\n    const fieldableKeys = getFieldableKeys(\n      key,\n      value as Record<string, unknown>,\n    );\n\n    const hasFieldableKeys = fieldableKeys ? fieldableKeys.length > 0 : false;\n\n    if (hasFieldableKeys && fieldableKeys) {\n      const innerFieldKey =\n        fieldableKeys && Array.isArray(fieldableKeys)\n          ? fieldableKeys[0]\n          : fieldableKeys;\n\n      const innerFieldType = infer(\n        innerFieldKey,\n        (value as Record<string, unknown>)[innerFieldKey],\n        value as Record<string, unknown>,\n        infer,\n        type,\n      );\n\n      if (innerFieldType) {\n        const accessor = Array.isArray(fieldableKeys)\n          ? fieldableKeys.map((el) => {\n              if (innerFieldType.accessor) {\n                return `${el}.${\n                  Array.isArray(innerFieldType.accessor)\n                    ? innerFieldType.accessor[0]\n                    : innerFieldType.accessor\n                }`;\n              }\n              return el;\n            })\n          : innerFieldType.accessor\n            ? Array.isArray(innerFieldType.accessor)\n              ? `${fieldableKeys}.${innerFieldType.accessor[0]}`\n              : `${fieldableKeys}.${innerFieldType.accessor}`\n            : fieldableKeys;\n\n        if (\n          innerFieldType?.type === \"text\" &&\n          (type === \"create\" || type === \"edit\") &&\n          hasId\n        ) {\n          return {\n            key,\n            type: \"relation\",\n            relation: true,\n            accessor: \"id\",\n            priority: 1,\n          };\n        }\n\n        return {\n          ...innerFieldType,\n          fieldable: true,\n          key,\n          accessor: accessor,\n          priority: 1,\n        };\n      }\n    }\n\n    return {\n      key,\n      fieldable: false,\n      type: \"object\",\n      priority: 1,\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nexport const richtextInfer: FieldInferencer = (key, value) => {\n  const isLongText = typeof value === \"string\" && value.length > 100;\n\n  if (isLongText) {\n    return {\n      key,\n      type: \"richtext\",\n      priority: 1,\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nexport const textInfer: FieldInferencer = (key, value) => {\n  const isText = typeof value === \"string\";\n\n  if (isText) {\n    return {\n      key,\n      type: \"text\",\n    };\n  }\n\n  return false;\n};\n","import type { FieldInferencer } from \"../types\";\n\nconst urlRegexp = /^(https?|ftp):\\/\\/(-\\.)?([^\\s/?\\.#-]+\\.?)+(\\/[^\\s]*)?$/i;\n\nexport const urlInfer: FieldInferencer = (key, value) => {\n  const isValidURL = typeof value === \"string\" && urlRegexp.test(value);\n\n  if (isValidURL) {\n    return {\n      key,\n      type: \"url\",\n      priority: 1,\n    };\n  }\n\n  return false;\n};\n","import { arrayInfer } from \"./array\";\nimport { booleanInfer } from \"./boolean\";\nimport { dateInfer } from \"./date\";\nimport { emailInfer } from \"./email\";\nimport { imageInfer } from \"./image\";\nimport { nullishInfer } from \"./nullish\";\nimport { numberInfer } from \"./number\";\nimport { objectInfer } from \"./object\";\nimport { relationInfer } from \"./relation\";\nimport { richtextInfer } from \"./richtext\";\nimport { textInfer } from \"./text\";\nimport { urlInfer } from \"./url\";\n\nexport const defaultElements = [\n  arrayInfer,\n  booleanInfer,\n  dateInfer,\n  emailInfer,\n  imageInfer,\n  nullishInfer,\n  numberInfer,\n  objectInfer,\n  relationInfer,\n  richtextInfer,\n  textInfer,\n  urlInfer,\n];\n","import type { FieldTransformer, InferField } from \"../types\";\n\nexport const basicToRelation: FieldTransformer = (\n  fields,\n  resources,\n  resource,\n  record,\n) => {\n  const mapped: Array<InferField> = fields.map((field) => {\n    if (\n      !field.relation &&\n      (field.type === \"text\" ||\n        field.type === \"richtext\" ||\n        field.type === \"number\") &&\n      !field.canRelation\n    ) {\n      // check if value is a valid id (regex)\n      // if multiple, check value by value\n      // take accessor into account (should be single only)\n      // valid id should be a valid uuid (meaning, lowercase alphanumeric with dashes)\n      const validUUIdRegex = /^[a-z0-9-]+$/;\n\n      const isValidUUID = (value: unknown) => {\n        return validUUIdRegex.test(`${value}`);\n      };\n\n      const isNotSelf = field.key.toLowerCase() !== \"id\";\n\n      const singleOrNoAccessor =\n        !field.accessor || typeof field.accessor === \"string\";\n\n      // in case of multiple accessors, we can't infer a relation\n      // or if the field is the id field\n      if (!singleOrNoAccessor || !isNotSelf) {\n        return field;\n      }\n\n      const valuesToCheck = field.multiple\n        ? (record[field.key] as unknown[])\n        : [record[field.key]];\n\n      const allValid = valuesToCheck.every((value) => {\n        return isValidUUID(\n          field.accessor\n            ? (value as Record<string, unknown>)[field.accessor as string]\n            : value,\n        );\n      });\n\n      if (allValid) {\n        return {\n          ...field,\n          canRelation: true,\n        };\n      }\n\n      return field;\n    }\n    return field;\n  });\n\n  return mapped;\n};\n","import type { FieldTransformer, InferField } from \"../types\";\n\nconst imageFieldLikeRegexp = /(image|photo|avatar|cover|thumbnail|icon)/i;\n\nexport const imageByKey: FieldTransformer = (fields) => {\n  const mapped: Array<InferField> = fields.map((field) => {\n    if (field.type === \"url\" && imageFieldLikeRegexp.test(field.key)) {\n      return {\n        ...field,\n        type: \"image\",\n      };\n    }\n\n    return field;\n  });\n\n  return mapped;\n};\n","import { resourceFromInferred } from \"../utilities\";\nimport type { FieldTransformer, InferField } from \"../types\";\n\nexport const relationByResource: FieldTransformer = (\n  fields,\n  resources,\n  // resource,\n  // record,\n  // infer,\n) => {\n  const mapped: Array<InferField> = fields.map((field) => {\n    const inferResource = resourceFromInferred(field, resources);\n\n    if (inferResource) {\n      return {\n        ...field,\n        relation: true,\n        type: \"relation\",\n        resource: inferResource,\n      };\n    }\n\n    return field;\n  });\n\n  return mapped;\n};\n","import type { FieldTransformer, InferField } from \"../types\";\n\nexport const relationToFieldable: FieldTransformer = (\n  fields,\n  resources,\n  resource,\n  record,\n  infer,\n  type,\n) => {\n  const mapped: Array<InferField> = fields.map((field) => {\n    if (field.relation && field.type === \"relation\" && !field.resource) {\n      const value = field.accessor\n        ? (record[field.key] as any)[field.accessor as string]\n        : record[field.key];\n\n      const inferredType = infer(field.key, value, record, infer, type);\n\n      if (inferredType && inferredType.type !== \"relation\") {\n        return {\n          ...field,\n          fieldable: true,\n          relation: false,\n          type: inferredType.type,\n          canRelation: true,\n        };\n      }\n    }\n\n    return field;\n  });\n\n  return mapped;\n};\n","import { basicToRelation } from \"./basic-to-relation\";\nimport { imageByKey } from \"./image-by-key\";\nimport { relationByResource } from \"./relation-by-resource\";\nimport { relationToFieldable } from \"./relation-to-fieldable\";\n\nexport const defaultTransformers = [\n  imageByKey,\n  relationByResource,\n  relationToFieldable,\n  basicToRelation,\n];\n","import React from \"react\";\nimport * as RefineCore from \"@refinedev/core\";\nimport * as gql from \"graphql-tag\";\n\nimport {\n  LivePreview,\n  LiveProvider,\n  type ContextProps,\n} from \"@aliemir/react-live\";\n\nimport { replaceImports, replaceExports } from \"../../utilities\";\nimport type { AdditionalScopeType, LiveComponentProps } from \"../../types\";\n\nconst defaultScope: Array<AdditionalScopeType> = [\n  [\"react\", \"React\", React],\n  [\"@refinedev/core\", \"RefineCore\", RefineCore],\n  [\"graphql-tag\", \"GraphqlTag\", gql],\n];\n\nconst InferencerLiveContext = React.createContext<ContextProps>(\n  {} as ContextProps,\n);\n\n/**\n * Live Component will render the code with `react-live`.\n * Errors will be handled by `ErrorComponent`.\n */\nexport const LiveComponent: React.FC<LiveComponentProps> = ({\n  fetchError,\n  code,\n  additionalScope,\n  errorComponent: ErrorComponent,\n}) => {\n  const sanitized =\n    (code &&\n      replaceExports(\n        replaceImports(\n          code,\n          [...defaultScope, ...(additionalScope ?? [])].reduce(\n            (acc, [packageName, variableName, _module, ignoreReplacement]) => {\n              if (ignoreReplacement) {\n                return acc;\n              }\n              return {\n                ...acc,\n                [packageName]: variableName,\n              };\n            },\n            {},\n          ),\n        ),\n      )) ??\n    \"\";\n\n  const scope = React.useMemo(() => {\n    return {\n      React,\n      ...React,\n      ...[...defaultScope, ...(additionalScope ?? [])].reduce(\n        (acc, [_packageName, variableName, packageContent]) => {\n          return {\n            ...acc,\n            [variableName]: packageContent,\n          };\n        },\n        {},\n      ),\n    };\n  }, [additionalScope]);\n\n  const ErrorComponentWithError = React.useMemo(() => {\n    const LiveErrorComponent = () => {\n      const { error } = React.useContext(InferencerLiveContext);\n\n      if (ErrorComponent) {\n        return (\n          <ErrorComponent\n            error={\n              error\n                ? `<p>An error occured while rendering the generated component.You can check the generated code from the below \"Show Code\" button and fix the error manually.</p>\n                                    <p>If you think this is a bug, please report the issue at <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/refinedev/refine/issues\">https://github.com/refinedev/refine/issues</a></p>\n                                    <p>Exception:</p>\n                                    <code>${error}</code>`\n                : typeof fetchError === \"string\"\n                  ? fetchError\n                  : fetchError\n                    ? `<p>Something went wrong while fetching the resource data.</p>\n                                    <p>To learn more about the Inferencer, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`\n                    : undefined\n            }\n          />\n        );\n      }\n\n      return null;\n    };\n\n    return LiveErrorComponent;\n  }, [ErrorComponent, fetchError]);\n\n  return (\n    <LiveProvider\n      Context={InferencerLiveContext}\n      code={sanitized}\n      scope={scope}\n      noInline\n    >\n      {!fetchError && <LivePreview Context={InferencerLiveContext} />}\n      <ErrorComponentWithError />\n    </LiveProvider>\n  );\n};\n","import React, { type SVGProps } from \"react\";\nimport Highlight, { defaultProps } from \"prism-react-renderer\";\nimport theme from \"prism-react-renderer/themes/vsDark\";\n\nimport type { CreateInferencerConfig } from \"../../types\";\nimport { prettierFormat } from \"../../utilities\";\n\nexport const SharedCodeViewer: CreateInferencerConfig[\"codeViewerComponent\"] =\n  ({ code: rawCode, loading }) => {\n    const code = React.useMemo(() => {\n      return prettierFormat(rawCode ?? \"\");\n    }, [rawCode]);\n\n    const [settled, setSettled] = React.useState(false);\n    const [isModalVisible, setIsModalVisible] = React.useState(false);\n    const [isVisible, setIsVisible] = React.useState(false);\n    const [isColumn, setIsColumn] = React.useState(false);\n    const [isModalButtonHover, setIsModalButtonHover] = React.useState(false);\n\n    // Settled Check\n    React.useEffect(() => {\n      if (!loading) {\n        const timeout = setTimeout(() => {\n          setSettled(true);\n        }, 300);\n\n        return () => {\n          clearTimeout(timeout);\n        };\n      }\n\n      return () => undefined;\n    }, [loading]);\n\n    // Visibility Check\n    React.useEffect(() => {\n      if (typeof window !== \"undefined\") {\n        const mediaQuery = window.matchMedia(\"(max-width: 449px)\");\n        if (mediaQuery.matches) {\n          setIsVisible(false);\n        } else {\n          setIsVisible(true);\n        }\n\n        const handleResize = () => {\n          if (mediaQuery.matches) {\n            setIsVisible(false);\n          } else {\n            setIsVisible(true);\n          }\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n          window.removeEventListener(\"resize\", handleResize);\n        };\n      }\n\n      return () => undefined;\n    }, []);\n\n    // Flex Direction Check\n    React.useEffect(() => {\n      if (typeof window !== \"undefined\") {\n        const mediaQuery = window.matchMedia(\"(max-width: 1280px)\");\n        if (mediaQuery.matches) {\n          setIsColumn(true);\n        } else {\n          setIsColumn(false);\n        }\n\n        const handleResize = () => {\n          if (mediaQuery.matches) {\n            setIsColumn(true);\n          } else {\n            setIsColumn(false);\n          }\n        };\n\n        window.addEventListener(\"resize\", handleResize);\n\n        return () => {\n          window.removeEventListener(\"resize\", handleResize);\n        };\n      }\n\n      return () => undefined;\n    }, []);\n\n    if (code && !loading) {\n      return (\n        <>\n          {isVisible && (\n            <div\n              className=\"refine-inferencer--code-viewer\"\n              style={{\n                position: \"sticky\",\n                bottom: \"24px\",\n                paddingTop: \"24px\",\n                left: 0,\n                right: 0,\n                width: \"100%\",\n                zIndex: 10,\n                display: \"flex\",\n                justifyContent: \"center\",\n                transition: \"all 0.2s ease\",\n                opacity: settled && !isModalVisible ? 1 : 0,\n                transform:\n                  settled && !isModalVisible\n                    ? \"translateY(0)\"\n                    : \"translateY(100px)\",\n              }}\n            >\n              <div\n                style={{\n                  width: \"calc(100% - calc(64px * 2))\",\n                  maxWidth: \"1080px\",\n                  padding: \"20px\",\n                  backgroundColor: \"#1A1A1A\",\n                  boxShadow:\n                    \"0px 4px 16px -4px rgba(0, 0, 0, 0.5), 0px 8px 32px -8px rgba(0, 0, 0, 0.35)\",\n                  borderRadius: \"16px\",\n                  display: \"flex\",\n                  alignItems: \"center\",\n                  justifyContent: \"space-between\",\n                  flexDirection: isColumn ? \"column\" : \"row\",\n                  gap: \"12px\",\n                }}\n              >\n                <div\n                  style={{\n                    display: \"flex\",\n                    alignItems: \"flex-start\",\n                    gap: \"8px\",\n                  }}\n                >\n                  <div>\n                    <InfoIcon />\n                  </div>\n                  <div\n                    style={{\n                      fontSize: \"14px\",\n                      lineHeight: \"20px\",\n                      color: \"#ffffff\",\n                    }}\n                  >\n                    <p\n                      style={{\n                        padding: 0,\n                        margin: 0,\n                      }}\n                    >\n                      Most of the page code is auto-generated by the{\" \"}\n                      <span\n                        style={{\n                          textDecoration: \"underline\",\n                        }}\n                      >\n                        Inferencer\n                      </span>{\" \"}\n                      feature, based on your backend data structure.\n                    </p>\n                    <p\n                      style={{\n                        padding: 0,\n                        margin: 0,\n                      }}\n                    >\n                      While this is an excellent way to experiment with refine,{\" \"}\n                      <span style={{ fontWeight: 600 }}>\n                        it&apos;s not intended to be used on production.\n                      </span>\n                    </p>\n                  </div>\n                </div>\n                <div>\n                  <button\n                    onPointerEnter={() => setIsModalButtonHover(true)}\n                    onPointerLeave={() => setIsModalButtonHover(false)}\n                    onClick={() => setIsModalVisible(true)}\n                    style={{\n                      appearance: \"none\",\n                      border: \"none\",\n                      padding: \"10px 16px\",\n                      borderRadius: \"4px\",\n                      display: \"flex\",\n                      alignItems: \"center\",\n                      justifyContent: \"center\",\n                      background: \"#0080FF\",\n                      color: \"#ffffff\",\n                      fontSize: \"14px\",\n                      lineHeight: \"20px\",\n                      fontWeight: 600,\n                      gap: \"8px\",\n                      cursor: \"pointer\",\n                      transition: \"all 0.2s ease\",\n                      transform: isModalButtonHover\n                        ? \"scale(1.025)\"\n                        : undefined,\n                      filter: isModalButtonHover\n                        ? \"brightness(1.1)\"\n                        : undefined,\n                    }}\n                  >\n                    <OpenIcon\n                      style={{\n                        flexShrink: 0,\n                      }}\n                    />\n                    <span>Show the auto-generated code</span>\n                  </button>\n                </div>\n              </div>\n            </div>\n          )}\n          <CodeModal\n            visible={isModalVisible}\n            onClose={() => setIsModalVisible(false)}\n            code={code}\n          />\n        </>\n      );\n    }\n\n    return null;\n  };\n\nconst CodeModal = ({\n  visible,\n  onClose,\n  code = \"\",\n}: {\n  visible: boolean;\n  onClose: () => void;\n  code?: string;\n}) => {\n  const modalRef = React.useRef<HTMLDivElement>(null);\n\n  const [isCopied, setIsCopied] = React.useState(false);\n  const [isCopyHover, setIsCopyHover] = React.useState(false);\n  const [isCloseHover, setIsCloseHover] = React.useState(false);\n  const [isLearnMoreHover, setIsLearnMoreHover] = React.useState(false);\n\n  // On Outside Click\n  React.useEffect(() => {\n    if (typeof document !== \"undefined\") {\n      const onOutsideClick = (event: PointerEvent) => {\n        if (\n          modalRef.current &&\n          !modalRef.current.contains(event.target as Node)\n        ) {\n          onClose();\n        }\n      };\n\n      document.addEventListener(\"pointerdown\", onOutsideClick);\n\n      return () => {\n        document.removeEventListener(\"pointerdown\", onOutsideClick);\n      };\n    }\n\n    return () => undefined;\n  }, [onClose]);\n\n  // onCopy Handler\n  const onCopy = () => {\n    if (typeof navigator !== \"undefined\") {\n      navigator.clipboard.writeText(code);\n      setIsCopied(true);\n      setTimeout(() => {\n        setIsCopied(false);\n      }, 1000);\n    }\n  };\n\n  const title = (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        style={{\n          fontWeight: 700,\n          fontSize: \"20px\",\n          lineHeight: \"32px\",\n          color: \"#0D0D0D\",\n        }}\n      >\n        Auto-generated code by Inferencer\n      </div>\n      <button\n        onClick={onClose}\n        onPointerEnter={() => setIsCloseHover(true)}\n        onPointerLeave={() => setIsCloseHover(false)}\n        style={{\n          flexShrink: 0,\n          appearance: \"none\",\n          border: \"none\",\n          background: \"none\",\n          padding: 0,\n          margin: 0,\n          outline: \"none\",\n          borderRadius: \"50px\",\n          width: \"32px\",\n          height: \"32px\",\n          cursor: \"pointer\",\n          transition: \"all 0.15s ease\",\n          transform: isCloseHover ? \"scale(1.05)\" : undefined,\n          filter: isCloseHover ? \"brightness(0.8)\" : undefined,\n        }}\n      >\n        <CloseIcon />\n      </button>\n    </div>\n  );\n\n  const highlight = (\n    <div\n      style={{\n        fontSize: \"13px\",\n        borderRadius: \"8px\",\n        flex: \"1\",\n        overflow: \"scroll\",\n        background: \"#1E1E1E\",\n      }}\n    >\n      <Highlight {...defaultProps} theme={theme} code={code} language=\"tsx\">\n        {({ className, style, tokens, getLineProps, getTokenProps }) => (\n          <pre\n            className={className}\n            style={{\n              ...style,\n              padding: \"14px 14px 14px 14px\",\n              margin: \"0\",\n              width: \"100%\",\n              boxSizing: \"border-box\",\n            }}\n          >\n            {tokens.map((line, i) => (\n              <div\n                key={i}\n                {...getLineProps({\n                  line,\n                  key: i,\n                })}\n              >\n                {line.map((token, key) => (\n                  <span\n                    key={key}\n                    {...getTokenProps({\n                      token,\n                      key,\n                    })}\n                  />\n                ))}\n              </div>\n            ))}\n          </pre>\n        )}\n      </Highlight>\n    </div>\n  );\n\n  const buttons = (\n    <div\n      style={{\n        display: \"flex\",\n        justifyContent: \"flex-start\",\n        alignItems: \"flex-end\",\n        gap: \"16px\",\n      }}\n    >\n      <button\n        onPointerEnter={() => setIsCopyHover(true)}\n        onPointerLeave={() => setIsCopyHover(false)}\n        onClick={onCopy}\n        style={{\n          appearance: \"none\",\n          height: \"40px\",\n          border: \"none\",\n          padding: \"10px 16px\",\n          borderRadius: \"4px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          background: \"#0080FF\",\n          color: \"#ffffff\",\n          fontSize: \"14px\",\n          lineHeight: \"20px\",\n          fontWeight: 600,\n          gap: \"8px\",\n          cursor: \"pointer\",\n          position: \"relative\",\n          overflow: \"hidden\",\n          transition: \"filter 0.2s ease\",\n          transform: isCopyHover ? \"scale(1.025)\" : \"scale(1)\",\n          filter: isCopyHover ? \"brightness(1.1)\" : undefined,\n        }}\n      >\n        <ClipboardIcon\n          style={{\n            flexShrink: 0,\n            marginTop: \"-2px\",\n            marginBottom: \"-2px\",\n          }}\n        />\n        <span>Copy Generated Code</span>\n        <div\n          style={{\n            position: \"absolute\",\n            width: \"100%\",\n            height: \"100%\",\n            top: 0,\n            left: 0,\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n            background: \"#0080FF\",\n            transition: \"all 0.2s ease\",\n            transform: isCopied ? \"translateY(0)\" : \"translateY(40px)\",\n          }}\n        >\n          <ClipboardIcon\n            style={{\n              flexShrink: 0,\n              marginTop: \"-2px\",\n              marginBottom: \"-2px\",\n            }}\n          />\n          <span>Copied!</span>\n        </div>\n      </button>\n      <a\n        onPointerEnter={() => setIsLearnMoreHover(true)}\n        onPointerLeave={() => setIsLearnMoreHover(false)}\n        href=\"https://refine.dev/docs/packages/documentation/inferencer\"\n        target=\"_blank\"\n        rel=\"noreferrer\"\n        style={{\n          appearance: \"none\",\n          textDecoration: \"none\",\n          border: \"none\",\n          padding: \"10px 16px\",\n          borderRadius: \"4px\",\n          display: \"flex\",\n          alignItems: \"center\",\n          justifyContent: \"center\",\n          background: \"rgba(0, 128, 255, 0.1)\",\n          color: \"#0080FF\",\n          fontSize: \"14px\",\n          lineHeight: \"20px\",\n          fontWeight: 600,\n          gap: \"8px\",\n          cursor: \"pointer\",\n          transition: \"all 0.2s ease\",\n          transform: isLearnMoreHover ? \"scale(1.025)\" : undefined,\n          filter: isLearnMoreHover ? \"brightness(1.1)\" : undefined,\n        }}\n      >\n        <OpenIcon\n          style={{\n            flexShrink: 0,\n          }}\n        />\n        <span>Learn more about inferencer</span>\n      </a>\n    </div>\n  );\n\n  return (\n    <div\n      className=\"refine-inferencer--code-viewer-modal\"\n      style={{\n        position: \"fixed\",\n        top: 0,\n        left: 0,\n        right: 0,\n        bottom: 0,\n        zIndex: 9999,\n        backgroundColor: \"rgba(0, 0, 0, 0.5)\",\n        transition: \"all 0.2s ease\",\n        opacity: visible ? 1 : 0,\n        pointerEvents: visible ? \"all\" : \"none\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n      }}\n    >\n      <div\n        ref={modalRef}\n        style={{\n          transform: visible\n            ? \"scale(1) translateY(0px)\"\n            : \"scale(0) translateY(-200px)\",\n          transition: \"all 0.25s cubic-bezier(.35,1.29,.81,1.08)\",\n          transitionDelay: \"0.25\",\n          width: \"calc(100% - calc(32px * 2))\",\n          height: \"calc(100% - calc(32px * 2))\",\n          backgroundColor: \"#fff\",\n          maxWidth: \"640px\",\n          maxHeight: \"720px\",\n          borderRadius: \"8px\",\n          padding: \"16px\",\n        }}\n      >\n        <div\n          style={{\n            display: \"flex\",\n            flexDirection: \"column\",\n            height: \"100%\",\n            width: \"100%\",\n            gap: \"16px\",\n          }}\n        >\n          {title}\n          {highlight}\n          {buttons}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst InfoIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={20}\n    height={20}\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      fill=\"#0080FF\"\n      fillRule=\"evenodd\"\n      d=\"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10Zm0-15a1.25 1.25 0 1 0 0 2.5A1.25 1.25 0 0 0 10 5Zm0 10c.69 0 1.25-.56 1.25-1.25V10a1.25 1.25 0 1 0-2.5 0v3.75c0 .69.56 1.25 1.25 1.25Z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst OpenIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={16}\n    height={16}\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      d=\"M5 2a1 1 0 0 1 0 2H4v8h8v-1a1 1 0 1 1 2 0v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Z\"\n    />\n    <path\n      fill=\"currentColor\"\n      d=\"M9 2a1 1 0 0 0 0 2h1.586L6.293 8.293a1 1 0 0 0 1.414 1.414L12 5.414V7a1 1 0 1 0 2 0V3a1 1 0 0 0-1-1H9Z\"\n    />\n  </svg>\n);\n\nconst CloseIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={32}\n    height={32}\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      fill=\"#A6A6A6\"\n      fillRule=\"evenodd\"\n      d=\"M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Zm-2.586-21.414a2 2 0 1 0-2.828 2.828L13.172 16l-2.586 2.586a2 2 0 1 0 2.828 2.828L16 18.828l2.586 2.586a2 2 0 1 0 2.828-2.828L18.828 16l2.586-2.586a2 2 0 1 0-2.828-2.828L16 13.172l-2.586-2.586Z\"\n      clipRule=\"evenodd\"\n    />\n  </svg>\n);\n\nconst ClipboardIcon = (props: SVGProps<SVGSVGElement>) => (\n  <svg\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width={20}\n    height={20}\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    {...props}\n  >\n    <path\n      fill=\"currentColor\"\n      fillRule=\"evenodd\"\n      d=\"M8 5a3 3 0 0 0 3 3h2a3 3 0 0 0 3-3h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1Zm0 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H9Z\"\n      clipRule=\"evenodd\"\n    />\n    <path fill=\"currentColor\" d=\"M13 4a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2Z\" />\n  </svg>\n);\n","import React from \"react\";\nimport { useDataProvider, useResource, type BaseKey } from \"@refinedev/core\";\n\nimport { pickDataProvider, dataProviderFromResource } from \"../utilities\";\nimport type { InferencerComponentProps } from \"../types\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\n/**\n * This hook will handle the data fetching for the inferencer with `loading` and `initial` states.\n * Data provider functions will be used respectively for the `list`, `show` and `edit` types.\n */\nexport const useInferFetch = (\n  type: \"list\" | \"show\" | \"edit\" | \"create\",\n  resourceNameOrRouteName?: string,\n  idFromProps?: string | number,\n  meta?: InferencerComponentProps[\"meta\"],\n) => {\n  const {\n    resource,\n    id: idFromURL,\n    resources,\n  } = useResource(resourceNameOrRouteName);\n\n  const id = idFromProps ?? idFromURL;\n\n  const dataProvider = useDataProvider();\n\n  const [error, setError] = React.useState<string | undefined>(undefined);\n\n  const [data, setData] = React.useState<Record<string, unknown> | undefined>(\n    undefined,\n  );\n  const [datas, setDatas] = React.useState<\n    Array<Record<string, unknown>> | undefined\n  >(undefined);\n  const [initial, setInitial] = React.useState<boolean>(true);\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const resolver = React.useCallback(\n    async (recordItemId: BaseKey | undefined) => {\n      const dataProviderName =\n        dataProviderFromResource(resource) ??\n        pickDataProvider(resource?.name, undefined, resources);\n      const dp = dataProvider(dataProviderName);\n\n      setLoading(true);\n      setError(undefined);\n\n      try {\n        if (type === \"list\" || type === \"create\") {\n          if (resource) {\n            const response = await dp.getList({\n              resource: resource?.name,\n              meta: pickMeta(resource?.identifier ?? resource?.name, meta, [\n                \"getList\",\n              ]),\n            });\n            const r = response.data?.[0];\n\n            if (!r) {\n              setError(\n                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n              );\n            }\n            setData(r);\n            setDatas(response.data);\n            setTimeout(() => {\n              setLoading(false);\n            }, 500);\n          }\n        }\n        if ((type === \"edit\" || type === \"show\") && recordItemId) {\n          if (resource) {\n            const response = await dp.getOne({\n              resource: resource?.name,\n              id: recordItemId,\n              meta: pickMeta(resource?.identifier ?? resource?.name, meta, [\n                \"getOne\",\n              ]),\n            });\n            const r = response.data;\n            if (!r) {\n              setError(\n                `<p>No records/data found for resource \"${resource?.name}\".</p>\n                            <p>Please check your data provider and resource.</p>\n                            <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n              );\n            }\n            setData(r);\n            setTimeout(() => {\n              setLoading(false);\n            }, 500);\n          }\n        }\n      } catch (error) {\n        console.warn(\n          \"An error occured while fetching the resource data. Please check the error message below:\",\n          error,\n        );\n        setError(\n          `<p>Something went wrong while fetching the resource data.</p>\n                    <p>Please check your data provider and API for resource \"${resource?.name}\".</p>\n                    <p>For more info, please check the <a href=\"https://refine.dev/docs/packages/documentation/inferencer/\" target=\"_blank\">documentation</a>.</p>`,\n        );\n        setTimeout(() => {\n          setLoading(false);\n        }, 500);\n      }\n    },\n    [type, dataProvider, resource, resources],\n  );\n\n  React.useEffect(() => {\n    setInitial(false);\n    if (!loading && !data) {\n      resolver(id);\n    }\n  }, [resolver, id]);\n\n  return {\n    data,\n    datas,\n    loading,\n    initial,\n    error,\n  };\n};\n","import React from \"react\";\nimport { useDataProvider } from \"@refinedev/core\";\n\nimport {\n  dataProviderFromResource,\n  removeRelationSuffix,\n  toPlural,\n  toSingular,\n} from \"../utilities\";\nimport type {\n  FieldInferencer,\n  InferField,\n  InferencerComponentProps,\n  ResourceInferenceAttempt,\n} from \"../types\";\nimport get from \"lodash-es/get.js\";\nimport { pickMeta } from \"../utilities/get-meta-props\";\n\ntype UseRelationFetchProps = {\n  record?: Record<string, unknown>;\n  fields?: (InferField | null | false)[];\n  infer: FieldInferencer;\n  meta?: InferencerComponentProps[\"meta\"];\n};\n\nexport const useRelationFetch = ({\n  record,\n  fields,\n  infer,\n  meta,\n}: UseRelationFetchProps) => {\n  const dataProvider = useDataProvider();\n\n  const [updatedFields, setUpdatedFields] = React.useState<InferField[]>([]);\n\n  const [initial, setInitial] = React.useState(true);\n  const [loading, setLoading] = React.useState<boolean>(false);\n\n  const resolver = React.useCallback(\n    async (allFields: (InferField | false | null)[]) => {\n      console.groupCollapsed(\n        \"@refinedev/inferencer is trying to detect relations\",\n      );\n      const attempts: Array<ResourceInferenceAttempt> = [];\n      setLoading(true);\n      try {\n        const promises = allFields.map(async (field) => {\n          if (field && (field.relation || field.canRelation)) {\n            if (record) {\n              if (field.relationInfer) {\n                return field;\n              }\n              const dataProviderName = dataProviderFromResource(field.resource);\n              const dp = dataProvider(dataProviderName);\n\n              const isMultiple = field.multiple;\n\n              const requestId = Array.isArray(field.accessor)\n                ? undefined\n                : field.multiple\n                  ? (record[field.key] as Array<unknown>).map((el) => {\n                      return field.accessor ? get(el, field.accessor) : el;\n                    })[0]\n                  : field.accessor\n                    ? get(record[field.key], field.accessor)\n                    : record[field.key];\n\n              if (requestId && field.resource) {\n                try {\n                  let record: Record<string, unknown> | undefined = {};\n\n                  if (isMultiple && dp.getMany) {\n                    const { data } = await dp.getMany({\n                      resource: field.resource.name,\n                      ids: [requestId],\n                      meta: pickMeta(\n                        field.resource?.identifier ?? field.resource?.name,\n                        meta,\n                        [\"getMany\"],\n                      ),\n                    });\n                    record = data?.[0];\n                  } else {\n                    const { data } = await dp.getOne({\n                      resource: field.resource.name,\n                      id: requestId,\n                      meta: pickMeta(\n                        field.resource?.identifier ?? field.resource?.name,\n                        meta,\n                        isMultiple ? [\"getMany\", \"getOne\"] : [\"getOne\"],\n                      ),\n                    });\n                    record = data;\n                  }\n\n                  attempts.push({\n                    status: \"success\",\n                    resource: field.resource.name,\n                    field: field.key,\n                  });\n\n                  const relationInfer = infer(\"__\", record, {}, infer);\n\n                  return {\n                    ...field,\n                    relationInfer,\n                  };\n                } catch (error) {\n                  attempts.push({\n                    status: \"error\",\n                    resource: field.resource.name,\n                    field: field.key,\n                  });\n                  return {\n                    ...field,\n                    relationInfer: null,\n                  };\n                }\n              }\n\n              if (requestId) {\n                let responseData;\n                let isPlural;\n\n                try {\n                  let record: Record<string, unknown> | undefined = {};\n\n                  if (isMultiple && dp.getMany) {\n                    const { data } = await dp.getMany({\n                      resource: toPlural(removeRelationSuffix(field.key)),\n                      ids: [requestId],\n                      meta: pickMeta(\n                        toPlural(removeRelationSuffix(field.key)),\n                        meta,\n                        [\"getMany\"],\n                      ),\n                    });\n                    record = data?.[0];\n                  } else {\n                    const { data } = await dp.getOne({\n                      resource: toPlural(removeRelationSuffix(field.key)),\n                      id: requestId,\n                      meta: pickMeta(\n                        toPlural(removeRelationSuffix(field.key)),\n                        meta,\n                        isMultiple ? [\"getMany\", \"getOne\"] : [\"getOne\"],\n                      ),\n                    });\n                    record = data;\n                  }\n\n                  attempts.push({\n                    status: \"success\",\n                    resource: toPlural(removeRelationSuffix(field.key)),\n                    field: field.key,\n                  });\n\n                  responseData = record;\n                  isPlural = true;\n                } catch (error) {\n                  attempts.push({\n                    status: \"error\",\n                    resource: toPlural(removeRelationSuffix(field.key)),\n                    field: field.key,\n                  });\n\n                  let record: Record<string, unknown> | undefined = {};\n\n                  try {\n                    if (isMultiple && dp.getMany) {\n                      const { data } = await dp.getMany({\n                        resource: toSingular(removeRelationSuffix(field.key)),\n                        meta: pickMeta(\n                          toSingular(removeRelationSuffix(field.key)),\n                          meta,\n                          [\"getMany\"],\n                        ),\n                        ids: [requestId],\n                      });\n                      record = data?.[0];\n                    } else {\n                      const { data } = await dp.getOne({\n                        resource: toSingular(removeRelationSuffix(field.key)),\n                        meta: pickMeta(\n                          toSingular(removeRelationSuffix(field.key)),\n                          meta,\n                          isMultiple ? [\"getMany\", \"getOne\"] : [\"getOne\"],\n                        ),\n                        id: requestId,\n                      });\n                      record = data;\n                    }\n\n                    attempts.push({\n                      status: \"success\",\n                      resource: toSingular(removeRelationSuffix(field.key)),\n                      field: field.key,\n                    });\n\n                    responseData = record;\n                    isPlural = false;\n                  } catch (error) {\n                    attempts.push({\n                      status: \"error\",\n                      resource: toSingular(removeRelationSuffix(field.key)),\n                      field: field.key,\n                    });\n\n                    return {\n                      ...field,\n                      relationInfer: null,\n                    };\n                  }\n                }\n\n                const relationInfer = infer(\"__\", responseData, {}, infer);\n\n                const resourceNameWithoutRelationSuffix = removeRelationSuffix(\n                  field.key,\n                );\n\n                return {\n                  ...field,\n                  relation: true,\n                  type: \"relation\",\n                  resource: {\n                    name: isPlural\n                      ? toPlural(resourceNameWithoutRelationSuffix)\n                      : toSingular(resourceNameWithoutRelationSuffix),\n                  },\n                  fieldable: false,\n                  canRelation: undefined,\n                  relationInfer,\n                };\n              }\n\n              return {\n                ...field,\n                relationInfer: null,\n              };\n            }\n          }\n          return field;\n        });\n\n        const results = await Promise.all(promises);\n\n        setUpdatedFields(results.filter((el) => el) as InferField[]);\n        setTimeout(() => {\n          setLoading(false);\n        }, 500);\n      } catch (error) {\n        setTimeout(() => {\n          setLoading(false);\n        }, 500);\n      }\n      setTimeout(() => {\n        console.log(\n          `Tried to detect relations with ${\n            attempts.length\n          } attempts and succeeded with ${\n            attempts.filter((el) => el.status === \"success\").length\n          } attempts.`,\n        );\n        console.groupEnd();\n\n        console.info(\n          \"@refinedev/inferencer may send multiple requests to your API for nonexistent resources when trying to detect relations. To learn more about how the inferencer works, visit https://s.refine.dev/how-inferencer-works\",\n        );\n      }, 500);\n    },\n    [dataProvider, record],\n  );\n\n  React.useEffect(() => {\n    setInitial(false);\n    if (!loading && fields && fields.length > 0 && updatedFields.length === 0) {\n      resolver(fields);\n    }\n  }, [resolver, loading, fields, resolver]);\n\n  return {\n    fields: updatedFields,\n    loading,\n    initial,\n  };\n};\n","import React from \"react\";\n\nimport type { CreateInferencerConfig } from \"../../types\";\n\nexport const ErrorComponent: CreateInferencerConfig[\"errorComponent\"] = ({\n  error,\n}) => {\n  if (error) {\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          minHeight: \"300px\",\n          position: \"relative\",\n        }}\n      >\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n          }}\n        >\n          <div\n            style={{\n              fontSize: \"1.5rem\",\n              fontWeight: \"bold\",\n            }}\n            // biome-ignore lint/security/noDangerouslySetInnerHtml: explicitly disabled\n            dangerouslySetInnerHTML={{ __html: error ?? \"\" }}\n          />\n        </div>\n      </div>\n    );\n  }\n\n  return null;\n};\n","import React from \"react\";\n\nimport type { CreateInferencerConfig } from \"../../types\";\n\nexport const LoadingComponent: CreateInferencerConfig[\"loadingComponent\"] =\n  () => {\n    const [dots, setDots] = React.useState(0);\n\n    React.useEffect(() => {\n      if (typeof window !== \"undefined\") {\n        const interval = setInterval(() => {\n          setDots((dots) => {\n            if (dots === 3) {\n              return 0;\n            }\n            return dots + 1;\n          });\n        }, 300);\n\n        return () => {\n          clearInterval(interval);\n        };\n      }\n\n      return () => undefined;\n    }, []);\n\n    return (\n      <div\n        style={{\n          display: \"flex\",\n          justifyContent: \"center\",\n          alignItems: \"center\",\n          minHeight: \"120px\",\n          position: \"relative\",\n        }}\n      >\n        <div\n          style={{\n            position: \"absolute\",\n            top: \"50%\",\n            left: \"50%\",\n            transform: \"translate(-50%, -50%)\",\n          }}\n        >\n          <span\n            style={{\n              fontSize: \"1rem\",\n              fontWeight: 600,\n            }}\n          >\n            loading{\".\".repeat(dots)}\n          </span>\n        </div>\n      </div>\n    );\n  };\n","import { createInferencer } from \"../../create-inferencer\";\nimport {\n  jsx,\n  componentName,\n  accessor,\n  printImports,\n  noOp,\n  getVariableName,\n  translatePrettyString,\n  translateActionTitle,\n  translateButtonTitle,\n  getMetaProps,\n  idQuoteWrapper,\n  deepHasKey,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport type {\n  ImportElement,\n  InferencerResultComponent,\n  InferField,\n  RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for show page with unstyled html elements\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n  resource,\n  fields,\n  meta,\n  isCustomPage,\n  id,\n  i18n,\n}: RendererContext) => {\n  const COMPONENT_NAME = componentName(resource.label ?? resource.name, \"show\");\n  const recordName = \"record\";\n  const imports: Array<ImportElement> = [\n    [\"React\", \"react\", true],\n    [\"useShow\", \"@refinedev/core\"],\n    [\"useResource\", \"@refinedev/core\"],\n    [\"useNavigation\", \"@refinedev/core\"],\n  ];\n\n  if (i18n) {\n    imports.push([\"useTranslate\", \"@refinedev/core\"]);\n  }\n\n  // has gqlQuery or gqlMutation in \"meta\"\n  const hasGql = deepHasKey(meta || {}, [\"gqlQuery\", \"gqlMutation\"]);\n  if (hasGql) {\n    imports.push([\"gql\", \"graphql-tag\", true]);\n  }\n\n  const relationFields: (InferField | null)[] = fields.filter(\n    (field) => field?.relation && !field?.fieldable && field?.resource,\n  );\n\n  const relationHooksCode = relationFields\n    .filter(Boolean)\n    .map((field) => {\n      if (field?.relation && !field.fieldable && field.resource) {\n        if (field.multiple) {\n          imports.push([\"useMany\", \"@refinedev/core\"]);\n          let ids = accessor(recordName, field.key);\n\n          if (field.accessor) {\n            ids = `${accessor(\n              recordName,\n              field.key,\n            )}?.map((item: any) => ${accessor(\n              \"item\",\n              undefined,\n              field.accessor,\n            )})`;\n          }\n\n          return `\n                const { data: ${getVariableName(\n                  field.key,\n                  \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${ids} || [],\n                    queryOptions: {\n                        enabled: !!${recordName} && !!${ids}?.length,\n                    },\n                    ${getMetaProps(\n                      field?.resource?.identifier ?? field?.resource?.name,\n                      meta,\n                      [\"getMany\"],\n                    )}\n                });\n                `;\n        }\n        imports.push([\"useOne\", \"@refinedev/core\"]);\n        return `\n                const { data: ${getVariableName(\n                  field.key,\n                  \"Data\",\n                )}, isLoading: ${getVariableName(field.key, \"IsLoading\")} } =\n                useOne({\n                    resource: \"${field.resource.name}\",\n                    id: ${accessor(\n                      recordName,\n                      field.key,\n                      field.accessor,\n                      false,\n                    )} || \"\",\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                      field?.resource?.identifier ?? field?.resource?.name,\n                      meta,\n                      [\"getOne\"],\n                    )}\n                });\n            `;\n      }\n      return undefined;\n    })\n    .filter(Boolean);\n\n  const renderRelationFields = (field: InferField) => {\n    if (field.relation && field.resource) {\n      const variableName = getVariableName(field.key, \"Data\");\n      const variableIsLoading = getVariableName(field.key, \"IsLoading\");\n\n      if (field.multiple) {\n        const variableDataLength = `${accessor(recordName, field.key)}?.length`;\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                    {${variableIsLoading} && ${variableDataLength} ? <>Loading...</> : (\n                        <>\n                        ${(() => {\n                          if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                              if (Array.isArray(field.relationInfer.accessor)) {\n                                console.log(\n                                  \"@refinedev/inferencer: Inferencer failed to render this field\",\n                                  {\n                                    key: field.key,\n                                    relation: field.relationInfer,\n                                  },\n                                );\n\n                                return `<span title=\"Inferencer failed to render this field. (Unsupported nesting)\">Cannot Render</span>`;\n                              }\n                              const mapItemName = getVariableName(field.key);\n                              const val = accessor(\n                                mapItemName,\n                                undefined,\n                                field.relationInfer.accessor,\n                              );\n                              return jsx`\n                                            {record?.${field.key}?.length ? ${variableName}?.data?.map((${mapItemName}: any) => <li key={${val}}>{${val}}</li>) : <></>}\n                                        `;\n                            }\n                            console.log(\n                              \"@refinedev/inferencer: Inferencer failed to render this field\",\n                              {\n                                key: field.key,\n                                relation: field.relationInfer,\n                              },\n                            );\n\n                            return `<span title=\"Inferencer failed to render this field. (Cannot find key)\">Cannot Render</span>`;\n                          }\n                          console.log(\n                            \"@refinedev/inferencer: Inferencer failed to render this field\",\n                            {\n                              key: field.key,\n                              relation: field.relationInfer,\n                            },\n                          );\n\n                          return `<span title=\"Inferencer failed to render this field (Cannot find relation)\">Cannot Render</span>`;\n                        })()}\n                        </>\n                    )}\n                    </ul>\n                </div>\n                `;\n      }\n\n      if (field.fieldable) {\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <div>{${accessor(recordName, field.key, field.accessor)}}</div>\n                </div>\n                `;\n      }\n\n      return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <div>\n                    {${variableIsLoading} ? <>Loading...</> : (\n                        <>\n                        ${(() => {\n                          if (field.relationInfer) {\n                            if (field.relationInfer?.accessor) {\n                              if (Array.isArray(field.relationInfer.accessor)) {\n                                return `{${accessor(\n                                  `${variableName}?.data`,\n                                  undefined,\n                                  field.relationInfer.accessor,\n                                  ' + \" \" + ',\n                                )}}`;\n                              }\n                              return `{${variableName}?.data?.${field.relationInfer.accessor}}`;\n                            }\n                            const cannotRender =\n                              field?.relationInfer?.type === \"object\" &&\n                              !field?.relationInfer?.accessor;\n\n                            if (cannotRender) {\n                              console.log(\n                                \"@refinedev/inferencer: Inferencer failed to render this field\",\n                                {\n                                  key: field.key,\n                                  relation: field.relationInfer,\n                                },\n                              );\n                            }\n\n                            return cannotRender\n                              ? `<span title=\"Inferencer failed to render this field. (Cannot find key)\">Cannot Render</span>`\n                              : `{${variableName}?.data}`;\n                          }\n                          return `{${variableName}?.data?.id}`;\n                        })()}\n                        </>\n                    )}\n                    </div>\n                </div>\n                `;\n    }\n    return undefined;\n  };\n\n  const textFields = (field: InferField) => {\n    if (field.type === \"text\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                        {${accessor(recordName, field.key)}?.map((item: any) => (\n                            <li key={${val}}>\n                                {${val}}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            `;\n      }\n      return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <div>\n                    {${accessor(recordName, field.key, field.accessor)}}\n                    </div>\n                </div>\n            `;\n    }\n    return undefined;\n  };\n\n  const imageFields = (field: InferField) => {\n    if (field.type === \"image\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <li key={${val}}>\n                            <img style={{ maxWidth: 200 }} src={${val}}/>\n                        </li>\n                    ))}\n                    </ul>\n                </div>\n            `;\n      }\n      return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <img src={{ maxWidth: 200 }} src={${accessor(\n                      recordName,\n                      field.key,\n                      field.accessor,\n                      \" + \",\n                    )}} />\n                </div>\n                `;\n    }\n    return undefined;\n  };\n\n  const emailFields = (field: InferField) => {\n    if (field.type === \"email\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                        {${accessor(recordName, field.key)}?.map((item: any) => (\n                            <li key={${val}}>\n                                <a href={\"mailto:\" + ${val}}>{${val}}</a>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            `;\n      }\n      return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <div>\n                        <a href={\"mailto:\" + ${accessor(\n                          recordName,\n                          field.key,\n                          field.accessor,\n                          \" + \",\n                        )}}>\n                            {${accessor(\n                              recordName,\n                              field.key,\n                              field.accessor,\n                              \" + \",\n                            )}}\n                        </a>\n                    </div>\n                </div>\n            `;\n    }\n    return undefined;\n  };\n\n  const urlFields = (field: InferField) => {\n    if (field.type === \"url\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                        {${accessor(recordName, field.key)}?.map((item: any) => (\n                            <li key={${val}}>\n                                <a href={${val}}>{${val}}</a>\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            `;\n      }\n      return jsx`\n            <div style={{ marginTop: \"6px\" }}>\n                <h5>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</h5>\n                <div>\n                    <a href={${accessor(\n                      recordName,\n                      field.key,\n                      field.accessor,\n                      \" + \",\n                    )}} target=\"_blank\" rel=\"noreferrer\">\n                        {${accessor(\n                          recordName,\n                          field.key,\n                          field.accessor,\n                          \" + \",\n                        )}}\n                    </a>\n                </div>\n            </div>\n            `;\n    }\n    return undefined;\n  };\n\n  const booleanFields = (field: InferField) => {\n    if (field.type === \"boolean\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                        {${accessor(recordName, field.key)}?.map((item: any) => (\n                            <li key={${val}}>\n                                {${val} ? \"Yes\" : \"No\"}\n                            </li>\n                        ))}\n                    </ul>\n                </div>\n            `;\n      }\n      return jsx`\n            <div style={{ marginTop: \"6px\" }}>\n                <h5>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</h5>\n                <div>\n                {${accessor(recordName, field.key, field.accessor, \" && \")} ? \"Yes\" : \"No\"}\n                </div>\n            </div>\n            `;\n    }\n    return undefined;\n  };\n\n  const dateFields = (field: InferField) => {\n    if (field.type === \"date\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                    {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <li key={${val}}>\n                            {(new Date(${val})).toLocaleString(undefined, { timeZone: \"UTC\" })}\n                        </li>\n                    ))}\n                    </ul>\n                </div>\n            `;\n      }\n      return jsx`\n            <div style={{ marginTop: \"6px\" }}>\n                <h5>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</h5>\n                <div>\n                    {(new Date(${accessor(\n                      recordName,\n                      field.key,\n                      field.accessor,\n                      \" + ' ' + \",\n                    )})).toLocaleString(undefined, { timeZone: \"UTC\" })}\n                </div>\n            </div>\n            `;\n    }\n    return undefined;\n  };\n\n  const richtextFields = (field: InferField) => {\n    if (field.type === \"richtext\") {\n      return jsx`\n            <div style={{ marginTop: \"6px\" }}>\n                <h5>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</h5>\n                <p>\n                {${accessor(recordName, field.key, field.accessor, ' + \" \" + ')}}\n                </p>\n            </div>\n            `;\n    }\n\n    return undefined;\n  };\n\n  const numberFields = (field: InferField) => {\n    if (field.type === \"number\") {\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor);\n        return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <ul>\n                        {${accessor(recordName, field.key)}?.map((item: any) => (\n                        <li key={${val}}>\n                            {${val}}\n                        </li>\n                        ))}\n                    </ul>\n                </div>\n                `;\n      }\n      return jsx`\n                <div style={{ marginTop: \"6px\" }}>\n                    <h5>${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}</h5>\n                    <div>\n                    {${accessor(\n                      recordName,\n                      field.key,\n                      field.accessor,\n                      ' + \" \" + ',\n                    )} ?? \"\"}\n                    </div>\n                </div>\n            `;\n    }\n    return undefined;\n  };\n\n  const wrapper = (code?: string) => {\n    if (code) {\n      return jsx`\n                ${code}\n            `;\n    }\n    return undefined;\n  };\n\n  const renderedFields: Array<string | undefined> = fields.map((field) => {\n    switch (field?.type) {\n      case \"text\":\n        return wrapper(textFields(field));\n      case \"number\":\n        return wrapper(numberFields(field));\n      case \"richtext\":\n        return wrapper(richtextFields(field));\n      case \"email\":\n        return wrapper(emailFields(field));\n      case \"image\":\n        return wrapper(imageFields(field));\n      case \"date\":\n        return wrapper(dateFields(field));\n      case \"boolean\":\n        return wrapper(booleanFields(field));\n      case \"url\":\n        return wrapper(urlFields(field));\n      case \"relation\":\n        return wrapper(renderRelationFields(field));\n      default:\n        return undefined;\n    }\n  });\n\n  const { canEdit, list } = resource ?? {};\n  const canList = !!list;\n\n  noOp(imports);\n  const useTranslateHook = i18n && \"const translate = useTranslate();\";\n\n  return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME} = () => {\n        ${useTranslateHook}\n        const { edit, list } = useNavigation();\n        ${isCustomPage ? \"\" : \"const { id } = useResource();\"}\n        const { query } = useShow(${\n          isCustomPage\n            ? `{ \n                    resource: \"${resource.name}\", \n                    id: ${idQuoteWrapper(id)},\n                    ${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      [\"getOne\"],\n                    )}\n                }`\n            : getMetaProps(resource?.identifier ?? resource?.name, meta, [\n                  \"getOne\",\n                ])\n              ? `{ ${getMetaProps(\n                  resource?.identifier ?? resource?.name,\n                  meta,\n                  [\"getOne\"],\n                )} }`\n              : \"\"\n        });\n        const { data, isLoading } = query;\n\n        const ${recordName} = data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <div style={{ padding: \"16px\" }}>\n            <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n                <h1>${translateActionTitle({\n                  resource,\n                  action: \"show\",\n                  i18n,\n                })}</h1>\n                <div style={{ display: \"flex\", gap: \"8px\" }}>\n                ${\n                  canList\n                    ? jsx`<button onClick={() => list(\"${\n                        resource.name\n                      }\")}>${translateActionTitle({\n                        resource,\n                        action: \"list\",\n                        i18n,\n                      })}</button>`\n                    : \"\"\n                }\n                ${\n                  canEdit\n                    ? jsx`<button onClick={() => edit(\"${resource.name}\", ${\n                        isCustomPage ? `\"${id}\"` : \"id ?? ''\"\n                      })}>${translateButtonTitle({\n                        action: \"edit\",\n                        i18n,\n                        noQuotes: true,\n                      })}</button>`\n                    : \"\"\n                }\n                </div>\n            </div>\n                <div>\n                    ${renderedFields.join(\"\")}\n                </div>\n            </div>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ShowInferencer: InferencerResultComponent = createInferencer({\n  type: \"show\",\n  additionalScope: [],\n  codeViewerComponent: SharedCodeViewer,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  renderer,\n});\n","import { useTable } from \"@refinedev/react-table\";\nimport { flexRender } from \"@tanstack/react-table\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n  jsx,\n  componentName,\n  accessor,\n  printImports,\n  dotAccessor,\n  noOp,\n  getVariableName,\n  translatePrettyString,\n  translateButtonTitle,\n  translateActionTitle,\n  getMetaProps,\n  deepHasKey,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport type {\n  InferencerResultComponent,\n  InferField,\n  ImportElement,\n  RendererContext,\n} from \"../../types\";\n\nconst getAccessorKey = (field: InferField) => {\n  return Array.isArray(field.accessor) || field.multiple\n    ? `accessorKey: \"${field.key}\"`\n    : field.accessor\n      ? `accessorKey: \"${dotAccessor(field.key, undefined, field.accessor)}\"`\n      : `accessorKey: \"${field.key}\"`;\n};\n\n/**\n * a renderer function for list page with unstyled html elements\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n  resource,\n  fields,\n  meta,\n  isCustomPage,\n  i18n,\n}: RendererContext) => {\n  const COMPONENT_NAME = componentName(resource.label ?? resource.name, \"list\");\n  const recordName = \"tableData?.data\";\n  const imports: Array<ImportElement> = [\n    [\"React\", \"react\", true],\n    [\"useNavigation\", \"@refinedev/core\"],\n    [\"useTable\", \"@refinedev/react-table\"],\n    [\"ColumnDef\", \"@tanstack/react-table\"],\n    [\"flexRender\", \"@tanstack/react-table\"],\n  ];\n\n  if (i18n) {\n    imports.push([\"useTranslate\", \"@refinedev/core\"]);\n  }\n\n  // has gqlQuery or gqlMutation in \"meta\"\n  const hasGql = deepHasKey(meta || {}, [\"gqlQuery\", \"gqlMutation\"]);\n  if (hasGql) {\n    imports.push([\"gql\", \"graphql-tag\", true]);\n  }\n\n  const relationFields: (InferField | null)[] = fields.filter(\n    (field) => field?.relation && !field?.fieldable && field?.resource,\n  );\n\n  const relationHooksCode = relationFields\n    .filter(Boolean)\n    .map((field) => {\n      if (field?.relation && !field.fieldable && field.resource) {\n        imports.push([\"GetManyResponse\", \"@refinedev/core\"]);\n        imports.push([\"useMany\", \"@refinedev/core\"]);\n\n        let idsString = \"\";\n\n        if (field.multiple) {\n          idsString = `[].concat(...(${recordName}?.map((item) => ${accessor(\n            \"item\",\n            field.key,\n            field.accessor,\n            false,\n          )}) ?? []))`;\n        } else {\n          idsString = `${recordName}?.map((item) => ${accessor(\n            \"item\",\n            field.key,\n            field.accessor,\n            false,\n          )}) ?? []`;\n        }\n\n        return `\n                const { data: ${getVariableName(field.key, \"Data\")} } =\n                useMany({\n                    resource: \"${field.resource.name}\",\n                    ids: ${idsString},\n                    queryOptions: {\n                        enabled: !!${recordName},\n                    },\n                    ${getMetaProps(\n                      field?.resource?.identifier ?? field?.resource?.name,\n                      meta,\n                      [\"getMany\"],\n                    )}\n                });\n                `;\n      }\n      return undefined;\n    })\n    .filter(Boolean);\n\n  const relationVariableNames = relationFields\n    ?.map((field) => {\n      if (field?.resource) {\n        return getVariableName(field.key, \"Data\");\n      }\n      return undefined;\n    })\n    .filter(Boolean);\n\n  const renderRelationFields = (field: InferField) => {\n    if (field.relation && field.resource) {\n      const variableName = `${getVariableName(field.key, \"Data\")}?.data`;\n\n      if (Array.isArray(field.accessor)) {\n        return undefined;\n      }\n\n      const id = `id: \"${field.key}\"`;\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n      const accessorKey = getAccessorKey(field);\n\n      let cell = \"\";\n\n      // if multiple, then map it with tagfield\n      // if not, then just show the value\n\n      if (field.multiple) {\n        let val = \"item\";\n\n        // for multiple\n        if (field?.relationInfer) {\n          val = accessor(\"item\", undefined, field.relationInfer.accessor);\n        }\n\n        if (\n          field?.relationInfer &&\n          field?.relationInfer?.type === \"object\" &&\n          !field?.relationInfer?.accessor\n        ) {\n          console.log(\n            \"@refinedev/inferencer: Inferencer failed to render this field\",\n            {\n              key: field.key,\n              relation: field.relationInfer,\n            },\n          );\n\n          return `cell: function render({ getValue }) {\n                        return (\n                            <span title=\"Inferencer failed to render this field (Cannot find key)\">Cannot Render</span>\n                        )\n                    }`;\n        }\n\n        cell = `cell: function render({ getValue, table }) {\n                    const meta = table.options.meta as {\n                        ${getVariableName(field.key, \"Data\")}: GetManyResponse;\n                    };\n\n                    ${field?.accessor ? \"try {\" : \"\"}\n\n                    const ${getVariableName(field.key, \"\")} = getValue<any[]>()?.map((item) => {\n                        return meta.${getVariableName(field.key, \"Data\")}?.data?.find(\n                            (resourceItems) => resourceItems.id === ${accessor(\n                              \"item\",\n                              undefined,\n                              field.accessor,\n                            )}\n                        );\n                    })\n\n\n                    return (\n                        <ul>\n                            {${getVariableName(field.key, \"\")}?.map((item, index) => (\n                                <li key={index}>\n                                    {${val}}\n                                </li>\n                            ))}\n                        </ul>\n                    )\n                    ${\n                      field?.accessor ? \" } catch (error) { return null; }\" : \"\"\n                    }\n                }\n            `;\n      } else {\n        if (field?.relationInfer) {\n          const cannotRender =\n            field?.relationInfer?.type === \"object\" &&\n            !field?.relationInfer?.accessor;\n\n          if (cannotRender) {\n            console.log(\n              \"@refinedev/inferencer: Inferencer failed to render this field\",\n              {\n                key: field.key,\n                relation: field.relationInfer,\n              },\n            );\n          }\n\n          cell = `cell: function render({ getValue, table }) {\n                        const meta = table.options.meta as {\n                            ${getVariableName(field.key, \"Data\")}: GetManyResponse;\n                        };\n\n                        ${field?.accessor ? \"try {\" : \"\"}\n\n                        const ${getVariableName(\n                          field.key,\n                          \"\",\n                        )} = meta.${variableName}?.find(\n                            (item) => item.id == getValue<any>(),\n                        );\n\n                        return ${\n                          cannotRender\n                            ? `<span title=\"Inferencer failed to render this field (Cannot find key)\">Cannot Render</span>`\n                            : `${accessor(\n                                getVariableName(field.key),\n                                undefined,\n                                field?.relationInfer?.accessor,\n                              )} ?? \"Loading...\"`\n                        };\n\n                        ${\n                          field?.accessor\n                            ? \" } catch (error) { return null; }\"\n                            : \"\"\n                        }\n                    },`;\n        } else {\n          cell = \"\";\n        }\n      }\n\n      return `\n                {\n                    ${id},\n                    ${header},\n                    ${accessorKey},\n                    ${cell}\n                }\n            `;\n    }\n    return undefined;\n  };\n\n  const imageFields = (field: InferField) => {\n    if (field.type === \"image\") {\n      const id = `id: \"${field.key}\"`;\n      const accessorKey = getAccessorKey(field);\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n\n      let cell = jsx`\n                cell: function render({ getValue }) {\n                    ${field?.accessor ? \"try {\" : \"\"}\n                        return <img style={{ maxWidth: \"100px\" }} src={${accessor(\n                          \"getValue<any>()\",\n                          undefined,\n                          Array.isArray(field.accessor)\n                            ? field.accessor\n                            : undefined,\n                          \" + \",\n                        )}} />\n                    ${\n                      field?.accessor ? \" } catch (error) { return null; }\" : \"\"\n                    }\n                }\n            `;\n\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n        cell = `\n                    cell: function render({ getValue }) {\n                        ${field?.accessor ? \"try {\" : \"\"}\n                            return (\n                                <ul>\n                                    {getValue<any[]>()?.map((item, index) => (\n                                        <li key={index}><img src={${val}} style={{ height: \"50px\", maxWidth: \"100px\" }} /></li>\n                                    ))}\n                                </ul>\n                            )\n                        ${\n                          field?.accessor\n                            ? \" } catch (error) { return null; }\"\n                            : \"\"\n                        }\n                    }\n                `;\n      }\n\n      return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n    }\n    return undefined;\n  };\n\n  const emailFields = (field: InferField) => {\n    if (field.type === \"email\") {\n      const id = `id: \"${field.key}\"`;\n      const accessorKey = getAccessorKey(field);\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n\n      let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <a href={\"mailto:\" + ${accessor(\n                      \"getValue<any>()\",\n                      undefined,\n                      Array.isArray(field.accessor)\n                        ? field.accessor\n                        : undefined,\n                      ' + \" \" + ',\n                    )}}>{${accessor(\n                      \"getValue<any>()\",\n                      undefined,\n                      Array.isArray(field.accessor)\n                        ? field.accessor\n                        : undefined,\n                      ' + \" \" + ',\n                    )}}</a>\n                }\n            `;\n\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n        cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <ul>\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <li key={index}>\n                                        {${val}}\n                                    </li>\n                                ))}\n                            </ul>\n                        )\n                    }\n                `;\n      }\n\n      return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n    }\n    return undefined;\n  };\n\n  const urlFields = (field: InferField) => {\n    if (field.type === \"url\") {\n      const id = `id: \"${field.key}\"`;\n      const accessorKey = getAccessorKey(field);\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n\n      let cell = jsx`\n                cell: function render({ getValue }) {\n                    return <a href={${accessor(\n                      \"getValue<any>()\",\n                      undefined,\n                      Array.isArray(field.accessor)\n                        ? field.accessor\n                        : undefined,\n                      \" + \",\n                    )}}>{${accessor(\n                      \"getValue<any>()\",\n                      undefined,\n                      Array.isArray(field.accessor)\n                        ? field.accessor\n                        : undefined,\n                      \" + \",\n                    )}}</a>\n                }\n            `;\n\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n        cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <ul>\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <li key={index}>\n                                        {${val}}\n                                    </li>\n                                ))}\n                            </ul>\n                        )\n                    }\n                `;\n      }\n\n      return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n    }\n    return undefined;\n  };\n\n  const booleanFields = (field: InferField) => {\n    if (field?.type === \"boolean\") {\n      const id = `id: \"${field.key}\"`;\n      const accessorKey = getAccessorKey(field);\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n\n      let cell = jsx`\n                cell: function render({ getValue }) {\n                    return ${accessor(\n                      \"getValue<any>()\",\n                      undefined,\n                      Array.isArray(field.accessor)\n                        ? field.accessor\n                        : undefined,\n                      \" + \",\n                    )} ? \"yes\" : \"no\"\n                }\n            `;\n\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n        cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <ul>\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <li key={index}>\n                                        {${val} ? \"yes\" : \"no\"}\n                                    </li>\n                                ))}\n                            </ul>\n                        );\n                    }\n                `;\n      }\n\n      return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n    }\n\n    return undefined;\n  };\n\n  const dateFields = (field: InferField) => {\n    if (field.type === \"date\") {\n      const id = `id: \"${field.key}\"`;\n      const accessorKey = getAccessorKey(field);\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n\n      let cell = jsx`\n                cell: function render({ getValue }) {\n                    return (new Date(${accessor(\n                      \"getValue<any>()\",\n                      undefined,\n                      Array.isArray(field.accessor)\n                        ? field.accessor\n                        : undefined,\n                      ' + \" \" + ',\n                    )})).toLocaleString(undefined, { timeZone: \"UTC\" })\n                }\n            `;\n\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor, \" + \");\n\n        cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <ul>\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <li key={index}>\n                                    {(new Date(${val})).toLocaleString(undefined, { timeZone: \"UTC\" })}\n                                    </li>\n                                ))}\n                            </ul>\n                        )\n                    }\n                `;\n      }\n\n      return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n    }\n    return undefined;\n  };\n\n  const basicFields = (field: InferField) => {\n    if (\n      field &&\n      (field.type === \"text\" ||\n        field.type === \"number\" ||\n        field.type === \"richtext\")\n    ) {\n      const id = `id: \"${field.key}\"`;\n      const accessorKey = getAccessorKey(field);\n      const header = `header: ${translatePrettyString({\n        resource,\n        field,\n        i18n,\n        noBraces: true,\n      })}`;\n\n      let cell = \"\";\n\n      if (field.multiple) {\n        const val = accessor(\"item\", undefined, field.accessor, ' + \" \" + ');\n\n        cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <ul>\n                                {getValue<any[]>()?.map((item, index) => (\n                                    <li key={index}>\n                                        {${val}}\n                                    </li>\n                                ))}\n                            </ul>\n                        )\n                    }\n                `;\n      }\n\n      if (!field.multiple && Array.isArray(field.accessor)) {\n        cell = `\n                    cell: function render({ getValue }) {\n                        return (\n                            <>{${accessor(\n                              \"getValue<any>()\",\n                              field.key,\n                              field.accessor,\n                            )}}</>\n                        );\n                    }\n                `;\n      }\n\n      return `\n                {\n                    ${id},\n                    ${accessorKey},\n                    ${header},\n                    ${cell}\n                }\n            `;\n    }\n    return undefined;\n  };\n\n  const { canEdit, canShow, canCreate } = resource ?? {};\n\n  const actionColumnTitle = i18n ? `translate(\"table.actions\")` : `\"Actions\"`;\n\n  const actionButtons =\n    canEdit || canShow\n      ? jsx`\n    {\n        id: \"actions\",\n        accessorKey: \"id\",\n        header: ${actionColumnTitle},\n        cell: function render({ getValue }) {\n            return (\n                <div\n                    style={{\n                        display: \"flex\",\n                        flexDirection: \"row\",\n                        flexWrap: \"wrap\",\n                        gap: \"4px\",\n                    }}\n                >\n                ${\n                  canShow\n                    ? jsx`\n                    <button\n                        onClick={() => {\n                            show(\"${resource.name}\", getValue() as string);\n                        }}\n                    >\n                        ${translateButtonTitle({\n                          action: \"show\",\n                          i18n,\n                          noQuotes: true,\n                        })}\n                    </button>\n                    `\n                    : \"\"\n                }\n                    ${\n                      canEdit\n                        ? jsx`\n                            <button\n                            onClick={() => {\n                                edit(\"${resource.name}\", getValue() as string);\n                            }}\n                        >\n                            ${translateButtonTitle({\n                              action: \"edit\",\n                              i18n,\n                              noQuotes: true,\n                            })}\n                        </button>\n                    `\n                        : \"\"\n                    }\n                </div>\n            );\n        },\n    },\n        `\n      : \"\";\n\n  const renderedFields: Array<string | undefined> = fields.map((field) => {\n    switch (field?.type) {\n      case \"text\":\n      case \"number\":\n      case \"richtext\":\n        return basicFields(field);\n      case \"email\":\n        return emailFields(field);\n      case \"image\":\n        return imageFields(field);\n      case \"date\":\n        return dateFields(field);\n      case \"boolean\":\n        return booleanFields(field);\n      case \"url\":\n        return urlFields(field);\n      case \"relation\":\n        return renderRelationFields(field);\n      default:\n        return undefined;\n    }\n  });\n\n  noOp(imports);\n\n  const useTranslateHook = i18n && \"const translate = useTranslate();\";\n\n  return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME} = () => {\n        ${useTranslateHook}\n        const columns = React.useMemo<ColumnDef<any>[]>(() => [\n            ${[...renderedFields, actionButtons].filter(Boolean).join(\",\")}\n        ], [${i18n ? \"translate\" : \"\"}]);\n\n        ${\n          canEdit || canShow\n            ? jsx`\n        const { ${canEdit ? \"edit,\" : \"\"} ${canShow ? \"show,\" : \"\"} ${\n          canCreate ? \"create,\" : \"\"\n        } } = useNavigation();\n        `\n            : \"\"\n        }\n\n        const {\n            getHeaderGroups,\n            getRowModel,\n            setOptions,\n            refineCore: {\n                tableQueryResult: { data: tableData },\n            },\n            getState,\n            setPageIndex,\n            getCanPreviousPage,\n            getPageCount,\n            getCanNextPage,\n            nextPage,\n            previousPage,\n            setPageSize,\n            getColumn,\n        } = useTable({\n            columns,\n            ${\n              isCustomPage\n                ? `\n            refineCoreProps: {\n                resource: \"${resource.name}\",\n                ${getMetaProps(resource?.identifier ?? resource?.name, meta, [\n                  \"getList\",\n                ])}\n            }\n            `\n                : getMetaProps(resource?.identifier ?? resource?.name, meta, [\n                      \"getList\",\n                    ])\n                  ? `refineCoreProps: { ${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      [\"getList\"],\n                    )} },`\n                  : \"\"\n            }\n            \n        });\n\n        ${relationHooksCode}\n\n        setOptions((prev) => ({\n            ...prev,\n            meta: {\n                ...prev.meta,\n                ${relationVariableNames.join(\", \")}\n            },\n        }));\n\n        return (\n            <div style={{ padding: \"16px\" }}>\n            <div style={{ display: \"flex\", alignItems: \"center\", justifyContent: \"space-between\" }}>\n                <h1>${translateActionTitle({\n                  resource,\n                  action: \"list\",\n                  i18n,\n                })}</h1>\n                ${\n                  canCreate\n                    ? jsx`<button onClick={() => create(\"${\n                        resource.name\n                      }\")}>${translateButtonTitle({\n                        action: \"create\",\n                        i18n,\n                        noQuotes: true,\n                      })}</button>`\n                    : \"\"\n                }\n            </div>\n                <div style={{ maxWidth: \"100%\", overflowY: \"scroll\" }}>\n                    <table>\n                        <thead>\n                            {getHeaderGroups().map((headerGroup) => (\n                                <tr key={headerGroup.id}>\n                                    {headerGroup.headers.map((header) => (\n                                        <th key={header.id}>\n                                            {!header.isPlaceholder && (\n                                                flexRender(\n                                                    header.column.columnDef\n                                                        .header,\n                                                    header.getContext(),\n                                                )\n                                            )}\n                                        </th>\n                                    ))}\n                                </tr>\n                            ))}\n                        </thead>\n                        <tbody>\n                            {getRowModel().rows.map((row) => (\n                                <tr key={row.id}>\n                                    {row.getVisibleCells().map((cell) => (\n                                        <td key={cell.id}>\n                                            {flexRender(\n                                                cell.column.columnDef.cell,\n                                                cell.getContext(),\n                                            )}\n                                        </td>\n                                    ))}\n                                </tr>\n                            ))}\n                        </tbody>\n                    </table>\n                </div>\n                <div style={{ marginTop: \"12px\" }}>\n                    <button\n                        onClick={() => setPageIndex(0)}\n                        disabled={!getCanPreviousPage()}\n                    >\n                        {\"<<\"}\n                    </button>\n                    <button\n                        onClick={() => previousPage()}\n                        disabled={!getCanPreviousPage()}\n                    >\n                        {\"<\"}\n                    </button>\n                    <button onClick={() => nextPage()} disabled={!getCanNextPage()}>\n                        {\">\"}\n                    </button>\n                    <button\n                        onClick={() => setPageIndex(getPageCount() - 1)}\n                        disabled={!getCanNextPage()}\n                    >\n                        {\">>\"}\n                    </button>\n                    <span>\n                        <strong>\n                            {\" \"} {getState().pagination.pageIndex + 1} / {\" \"} {getPageCount()} {\" \"}\n                        </strong>\n                    </span>\n                    <span>\n                        | ${\n                          i18n ? `{translate(\"pagination.go\")}` : \"Go to Page\"\n                        }:{\" \"}\n                        <input\n                            type=\"number\"\n                            defaultValue={getState().pagination.pageIndex + 1}\n                            onChange={(e) => {\n                                const page = e.target.value\n                                    ? Number(e.target.value) - 1\n                                    : 0;\n                                setPageIndex(page);\n                            }}\n                        />\n                    </span>{\" \"}\n                    <select\n                        value={getState().pagination.pageSize}\n                        onChange={(e) => {\n                            setPageSize(Number(e.target.value));\n                        }}\n                    >\n                        {[10, 20, 30, 40, 50].map((pageSize) => (\n                            <option key={pageSize} value={pageSize}>\n                                ${\n                                  i18n\n                                    ? `{translate(\"pagination.show\")}`\n                                    : \"Show\"\n                                } {pageSize}\n                            </option>\n                        ))}\n                    </select>\n                </div>\n            </div>   \n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const ListInferencer: InferencerResultComponent = createInferencer({\n  type: \"list\",\n  additionalScope: [\n    [\"@refinedev/react-table\", \"RefineReactTable\", { useTable }],\n    [\"@tanstack/react-table\", \"TanstackReactTable\", { flexRender }],\n  ],\n  codeViewerComponent: SharedCodeViewer,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  renderer,\n});\n","import { useForm } from \"@refinedev/react-hook-form\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n  jsx,\n  componentName,\n  accessor,\n  printImports,\n  toSingular,\n  isIDKey,\n  dotAccessor,\n  getOptionLabel,\n  noOp,\n  getVariableName,\n  translatePrettyString,\n  translateActionTitle,\n  translateButtonTitle,\n  getMetaProps,\n  deepHasKey,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport type {\n  InferencerResultComponent,\n  InferField,\n  ImportElement,\n  RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for create page with unstyled html elements\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n  resource,\n  fields,\n  meta,\n  isCustomPage,\n  i18n,\n}: RendererContext) => {\n  const COMPONENT_NAME = componentName(\n    resource.label ?? resource.name,\n    \"create\",\n  );\n  const imports: Array<ImportElement> = [\n    [\"React\", \"react\", true],\n    [\"useNavigation\", \"@refinedev/core\"],\n    [\"useForm\", \"@refinedev/react-hook-form\"],\n  ];\n\n  if (i18n) {\n    imports.push([\"useTranslate\", \"@refinedev/core\"]);\n  }\n\n  // has gqlQuery or gqlMutation in \"meta\"\n  const hasGql = deepHasKey(meta || {}, [\"gqlQuery\", \"gqlMutation\"]);\n  if (hasGql) {\n    imports.push([\"gql\", \"graphql-tag\", true]);\n  }\n\n  const relationFields: (InferField | null)[] = fields.filter(\n    (field) => field?.relation && !field?.fieldable && field?.resource,\n  );\n\n  const relationHooksCode = relationFields\n    .filter(Boolean)\n    .map((field) => {\n      if (field?.relation && !field.fieldable && field.resource) {\n        imports.push([\"useSelect\", \"@refinedev/core\"]);\n\n        return `\n                const { options: ${getVariableName(field.key, \"Options\")} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    ${getOptionLabel(field)}\n                    ${getMetaProps(\n                      field?.resource?.identifier ?? field?.resource?.name,\n                      meta,\n                      [\"getList\"],\n                    )}\n                });\n            `;\n      }\n      return undefined;\n    })\n    .filter(Boolean);\n\n  const renderRelationFields = (field: InferField) => {\n    if (field.relation && field.resource) {\n      imports.push([\"useSelect\", \"@refinedev/core\"]);\n\n      const variableName = getVariableName(field.key, \"Options\");\n\n      return jsx`\n            <label>\n                <span style={{ marginRight: \"8px\" }}>\n                    ${translatePrettyString({\n                      resource,\n                      field,\n                      i18n,\n                      noQuotes: true,\n                    })}\n                </span>\n                <select\n                    placeholder=\"Select ${toSingular(field.resource.name)}\"\n                    {...register(\"${dotAccessor(\n                      field.key,\n                      undefined,\n                      field.accessor,\n                    )}\", {\n                        required: ${\n                          field.multiple ? \"false\" : '\"This field is required\"'\n                        },\n                    })}\n                >\n                    {${variableName}?.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </select>\n                <span style={{ color: \"red\" }}>\n                    {${accessor(\n                      \"(errors as any)\",\n                      field.key,\n                      field.accessor,\n                      false,\n                    )}?.message as string}\n                </span>\n            </label>\n            `;\n    }\n    return undefined;\n  };\n\n  const basicInputFields = (field: InferField) => {\n    if (\n      field.type === \"text\" ||\n      field.type === \"url\" ||\n      field.type === \"email\" ||\n      field.type === \"number\" ||\n      field.type === \"date\" ||\n      field.type === \"richtext\"\n    ) {\n      if (isIDKey(field.key)) {\n        return undefined;\n      }\n\n      if (field.multiple) {\n        return undefined;\n      }\n\n      const inp = field.type === \"richtext\" ? \"textarea\" : \"input\";\n\n      return jsx`\n                <label>\n                    <span style={{ marginRight: \"8px\" }}>\n                        ${translatePrettyString({\n                          resource,\n                          field,\n                          i18n,\n                          noQuotes: true,\n                        })}\n                    </span>\n                    <${inp}\n                        ${\n                          field.type !== \"date\" && field.type !== \"richtext\"\n                            ? `type=\"${field.type}\"`\n                            : \"\"\n                        }\n                        ${\n                          inp === \"textarea\"\n                            ? `\n                            rows={5}\n                            cols={33}\n                            style={{ verticalAlign: \"top\" }}\n                        `\n                            : \"\"\n                        }\n                        {...register(\"${dotAccessor(\n                          field.key,\n                          undefined,\n                          field.accessor,\n                        )}\", {\n                            required: \"This field is required\",\n                            ${\n                              field.type === \"number\"\n                                ? \"valueAsNumber: true,\"\n                                : \"\"\n                            }\n                        })}\n\n                    />\n                    <span style={{ color: \"red\" }}>\n                        {${accessor(\n                          \"(errors as any)\",\n                          field.key,\n                          field.accessor,\n                          false,\n                        )}?.message as string}\n                    </span>\n                </label>\n            `;\n    }\n    return undefined;\n  };\n\n  const booleanFields = (field: InferField) => {\n    if (field.type === \"boolean\") {\n      if (field.multiple) {\n        return undefined;\n      }\n\n      return jsx`\n                <label>\n                    <span style={{ marginRight: \"8px\" }}>\n                        ${translatePrettyString({\n                          resource,\n                          field,\n                          i18n,\n                          noQuotes: true,\n                        })}\n                    </span>\n                    <input\n                        type=\"checkbox\"\n                        {...register(\"${dotAccessor(\n                          field.key,\n                          undefined,\n                          field.accessor,\n                        )}\", {\n                            required: \"This field is required\",\n                        })}\n                    />\n                    <span style={{ color: \"red\" }}>\n                        {${accessor(\"errors\", field.key, field.accessor, false)}?.message as string}\n                    </span>\n                </label>\n            `;\n    }\n    return undefined;\n  };\n\n  const renderedFields: Array<string | undefined> = fields.map((field) => {\n    switch (field?.type) {\n      case \"text\":\n      case \"number\":\n      case \"email\":\n      case \"url\":\n      case \"richtext\":\n      case \"date\":\n        return basicInputFields(field);\n      case \"boolean\":\n        return booleanFields(field);\n      case \"relation\":\n        return renderRelationFields(field);\n      default:\n        return undefined;\n    }\n  });\n\n  const canList = !!resource.list;\n\n  noOp(imports);\n  const useTranslateHook = i18n && \"const translate = useTranslate();\";\n\n  return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME} = () => {\n        ${useTranslateHook}\n        ${\n          canList\n            ? `\n        const { list } = useNavigation();\n        `\n            : \"\"\n        }\n        const {\n            refineCore: { onFinish, formLoading },\n            register,\n            handleSubmit,\n            resetField,\n            formState: { errors },\n        } = useForm(\n            ${\n              isCustomPage\n                ? `\n            { \n                refineCoreProps: {\n                    resource: \"${resource.name}\",\n                    action: \"create\",\n                    ${getMetaProps(resource.identifier ?? resource.name, meta, [\n                      \"create\",\n                      \"getOne\",\n                    ])}\n                }\n            }`\n                : getMetaProps(resource.identifier ?? resource.name, meta, [\n                      \"create\",\n                      \"getOne\",\n                    ])\n                  ? `{\n                        refineCoreProps: { ${getMetaProps(\n                          resource.identifier ?? resource.name,\n                          meta,\n                          [\"create\", \"getOne\"],\n                        )} }\n                        }`\n                  : \"\"\n            }\n        );\n    \n        ${relationHooksCode}\n\n        return (\n            <div style={{ padding: \"16px\" }}>\n                <div style={{ display: \"flex\", justifyContent: ${\n                  canList ? '\"space-between\"' : '\"flex-start\"'\n                } }}>\n                    <h1>${translateActionTitle({\n                      resource,\n                      action: \"create\",\n                      i18n,\n                    })}</h1>\n                    ${\n                      canList\n                        ? jsx`\n                            <div>\n                        <button\n                                onClick={() => {\n                                    list(\"${resource.name}\");\n                                }}\n                        >\n                            ${translateActionTitle({\n                              resource,\n                              action: \"list\",\n                              i18n,\n                            })}\n                        </button>\n                        </div>\n                    `\n                        : \"\"\n                    }\n                </div>\n                <form onSubmit={handleSubmit(onFinish)}>\n                    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n                        ${renderedFields.join(\"\")}\n                        <div>\n                            <input type=\"submit\" value=${translateButtonTitle({\n                              action: \"save\",\n                              i18n,\n                            })} />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const CreateInferencer: InferencerResultComponent = createInferencer({\n  type: \"create\",\n  additionalScope: [\n    [\"@refinedev/react-hook-form\", \"RefineReactHookForm\", { useForm }],\n  ],\n  codeViewerComponent: SharedCodeViewer,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  renderer,\n});\n","import { useForm } from \"@refinedev/react-hook-form\";\n\nimport { createInferencer } from \"../../create-inferencer\";\nimport {\n  jsx,\n  componentName,\n  accessor,\n  printImports,\n  toSingular,\n  isIDKey,\n  dotAccessor,\n  getOptionLabel,\n  noOp,\n  getVariableName,\n  translatePrettyString,\n  translateActionTitle,\n  translateButtonTitle,\n  getMetaProps,\n  idQuoteWrapper,\n  deepHasKey,\n} from \"../../utilities\";\n\nimport { ErrorComponent } from \"./error\";\nimport { LoadingComponent } from \"./loading\";\nimport { SharedCodeViewer } from \"../../components/shared-code-viewer\";\n\nimport type {\n  InferencerResultComponent,\n  InferField,\n  ImportElement,\n  RendererContext,\n} from \"../../types\";\n\n/**\n * a renderer function for edit page with unstyled html elements\n * @internal used internally from inferencer components\n */\nexport const renderer = ({\n  resource,\n  fields,\n  meta,\n  isCustomPage,\n  id,\n  i18n,\n}: RendererContext) => {\n  const COMPONENT_NAME = componentName(resource.label ?? resource.name, \"edit\");\n  const recordName = getVariableName(resource.label ?? resource.name, \"Data\");\n  const imports: Array<ImportElement> = [\n    [\"React\", \"react\", true],\n    [\"useNavigation\", \"@refinedev/core\"],\n    [\"useForm\", \"@refinedev/react-hook-form\"],\n  ];\n\n  if (i18n) {\n    imports.push([\"useTranslate\", \"@refinedev/core\"]);\n  }\n\n  // has gqlQuery or gqlMutation in \"meta\"\n  const hasGql = deepHasKey(meta || {}, [\"gqlQuery\", \"gqlMutation\"]);\n  if (hasGql) {\n    imports.push([\"gql\", \"graphql-tag\", true]);\n  }\n\n  const relationFields: (InferField | null)[] = fields.filter(\n    (field) => field?.relation && !field?.fieldable && field?.resource,\n  );\n\n  const relationHooksCode = relationFields\n    .filter(Boolean)\n    .map((field) => {\n      if (field?.relation && !field.fieldable && field.resource) {\n        imports.push([\"useSelect\", \"@refinedev/core\"]);\n        let val = accessor(recordName, field.key, field.accessor, false);\n\n        if (field.multiple && field.accessor) {\n          val = `${accessor(\n            recordName,\n            field.key,\n          )}?.map((item: any) => ${accessor(\n            \"item\",\n            undefined,\n            field.accessor,\n          )})`;\n        }\n\n        return `\n                const { options: ${getVariableName(field.key, \"Options\")} } =\n                useSelect({\n                    resource: \"${field.resource.name}\",\n                    defaultValue: ${val},\n                    ${getOptionLabel(field)}\n                    ${getMetaProps(\n                      field?.resource?.identifier ?? field?.resource?.name,\n                      meta,\n                      [\"getList\"],\n                    )}\n                });\n\n                React.useEffect(() => {\n                    setValue(\"${dotAccessor(\n                      field.key,\n                      undefined,\n                      field.accessor,\n                    )}\", ${val});\n                }, [${getVariableName(field.key, \"Options\")}]);\n            `;\n      }\n      return undefined;\n    })\n    .filter(Boolean);\n\n  const renderRelationFields = (field: InferField) => {\n    if (field.relation && field.resource) {\n      imports.push([\"useSelect\", \"@refinedev/core\"]);\n\n      const variableName = getVariableName(field.key, \"Options\");\n\n      return jsx`\n            <label>\n                <span style={{ marginRight: \"8px\" }}>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</span>\n                <select\n                    placeholder=\"Select ${toSingular(field.resource.name)}\"\n                    {...register(\"${dotAccessor(\n                      field.key,\n                      undefined,\n                      field.accessor,\n                    )}\", {\n                        required: ${\n                          field.multiple ? \"false\" : '\"This field is required\"'\n                        },\n                    })}\n                >\n                    {${variableName}?.map((option) => (\n                        <option value={option.value} key={option.value}>\n                            {option.label}\n                        </option>\n                    ))}\n                </select>\n                <span style={{ color: \"red\" }}>\n                    {${accessor(\n                      \"(errors as any)\",\n                      field.key,\n                      field.accessor,\n                      false,\n                    )}?.message as string}\n                </span>\n            </label>\n            `;\n    }\n    return undefined;\n  };\n\n  const basicInputFields = (field: InferField) => {\n    if (\n      field.type === \"text\" ||\n      field.type === \"url\" ||\n      field.type === \"email\" ||\n      field.type === \"number\" ||\n      field.type === \"date\" ||\n      field.type === \"richtext\"\n    ) {\n      if (field.multiple) {\n        const val = dotAccessor(field.key, \"${index}\", field.accessor);\n\n        const valError = accessor(\n          `${accessor(\n            \"(errors as any)\",\n            field.key,\n            undefined,\n            false,\n          )}?.[index]`,\n          undefined,\n          field.accessor,\n        );\n\n        return `\n                    <>\n                        {${accessor(recordName, field.key)}?.map((item: any, index: number) => (\n                            <label key={index}>\n                                <span style={{ marginRight: \"8px\" }}>\n                                    ${translatePrettyString({\n                                      resource,\n                                      field,\n                                      i18n,\n                                      noQuotes: true,\n                                    })}\n                                </span>\n                                <input ${\n                                  field.type !== \"richtext\"\n                                    ? `\n                                type=\"${\n                                  field.type !== \"date\" ? field.type : \"text\"\n                                }\"\n                                `\n                                    : \"\"\n                                } {...register(\\`${val}\\`, { required: \"This field is required\", ${\n                                  field.type === \"number\"\n                                    ? \"valueAsNumber: true,\"\n                                    : \"\"\n                                } })} />\n                                <span style={{color: \"red\"}}>\n                                {${accessor(valError, \"message\")} as string}\n                                </span>\n                            </label>\n                        ))}\n                    </>\n                `;\n      }\n      const inp = field.type === \"richtext\" ? \"textarea\" : \"input\";\n      return jsx`\n            <label>\n                <span style={{ marginRight: \"8px\" }}>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</span>\n                <${inp}\n                ${isIDKey(field.key) ? \"disabled\" : \"\"}\n                ${\n                  field.type !== \"date\" && field.type !== \"richtext\"\n                    ? `type=\"${field.type}\"`\n                    : \"\"\n                }\n                ${\n                  inp === \"textarea\"\n                    ? `\n                    rows={5}\n                    cols={33}\n                    style={{ verticalAlign: \"top\" }}\n                `\n                    : \"\"\n                }\n                {...register(\"${dotAccessor(\n                  field.key,\n                  undefined,\n                  field.accessor,\n                )}\", {\n                    required: \"This field is required\",\n                    ${field.type === \"number\" ? \"valueAsNumber: true,\" : \"\"}\n                })}\n                />\n                <span style={{ color: \"red\" }}>\n                {${accessor(\n                  \"(errors as any)\",\n                  field.key,\n                  field.accessor,\n                  false,\n                )}?.message as string}\n                </span>\n            </label>\n            `;\n    }\n    return undefined;\n  };\n\n  const booleanFields = (field: InferField) => {\n    if (field.type === \"boolean\") {\n      if (field.multiple) {\n        const val = dotAccessor(field.key, undefined, field.accessor);\n\n        const errorVal = `${accessor(\n          \"(errors as any)\",\n          field.key,\n          undefined,\n          false,\n        )}?.[index]`;\n\n        return `\n                    <>\n                        {${accessor(recordName, field.key)}?.map((item: any, index: number) => (\n                            <label key={index}>\n                            <span style={{ marginRight: \"8px\" }}>\n                            ${translatePrettyString({\n                              resource,\n                              field,\n                              i18n,\n                              noQuotes: true,\n                            })}\n                            </span>\n                            <input\n                                type=\"checkbox\"\n                                {...register(\\`${val}.\\${index}\\`, {\n                                    required: \"This field is required\",\n                                })}\n                            />\n                            <span style={{ color: \"red\" }}>\n                                {${errorVal}?.message as string}\n                            </span>\n                        ))}\n                    </>\n                `;\n      }\n\n      return jsx`\n            <label>\n                <span style={{ marginRight: \"8px\" }}>${translatePrettyString({\n                  resource,\n                  field,\n                  i18n,\n                  noQuotes: true,\n                })}</span>\n                <input type=\"checkbox\" {...register(\"${dotAccessor(\n                  field.key,\n                  undefined,\n                  field.accessor,\n                )}\", {\n                    required: \"This field is required\",\n                })} />\n                <span style={{ color: \"red\" }}>\n                    {${accessor(\"errors\", field.key, field.accessor, false)}?.message as string}\n                </span>\n            </label>\n            `;\n    }\n    return undefined;\n  };\n\n  const renderedFields: Array<string | undefined> = fields.map((field) => {\n    switch (field?.type) {\n      case \"text\":\n      case \"number\":\n      case \"email\":\n      case \"url\":\n      case \"richtext\":\n      case \"date\":\n        return basicInputFields(field);\n      case \"boolean\":\n        return booleanFields(field);\n      case \"relation\":\n        return renderRelationFields(field);\n      default:\n        return undefined;\n    }\n  });\n\n  const canList = !!resource.list;\n\n  noOp(imports);\n  const useTranslateHook = i18n && \"const translate = useTranslate();\";\n\n  return jsx`\n    ${printImports(imports)}\n    \n    export const ${COMPONENT_NAME} = () => {\n        ${useTranslateHook}\n        ${\n          canList\n            ? `\n        const { list } = useNavigation();\n        `\n            : \"\"\n        }\n        const {\n            refineCore: { onFinish, formLoading, query },\n            register,\n            handleSubmit,\n            setValue,\n            formState: { errors },\n        } = useForm(\n            ${\n              isCustomPage\n                ? `\n            { \n                refineCoreProps: {\n                    resource: \"${resource.name}\",\n                    id: ${idQuoteWrapper(id)},\n                    action: \"edit\",\n                    ${getMetaProps(\n                      resource?.identifier ?? resource?.name,\n                      meta,\n                      [\"update\", \"getOne\"],\n                    )}\n                }\n            }`\n                : getMetaProps(resource?.identifier ?? resource?.name, meta, [\n                      \"update\",\n                      \"getOne\",\n                    ])\n                  ? `{ refineCoreProps: {\n                        ${getMetaProps(\n                          resource?.identifier ?? resource?.name,\n                          meta,\n                          [\"update\", \"getOne\"],\n                        )}\n                    } }`\n                  : \"\"\n            }\n        );\n    \n        const ${recordName} = query?.data?.data;\n    \n        ${relationHooksCode}\n\n        return (\n            <div style={{ padding: \"16px\" }}>\n                <div style={{ display: \"flex\", justifyContent: ${\n                  canList ? '\"space-between\"' : '\"flex-start\"'\n                } }}>\n                    <h1>${translateActionTitle({\n                      resource,\n                      action: \"edit\",\n                      i18n,\n                    })}</h1>\n                    ${\n                      canList\n                        ? jsx`\n                    <div>\n                        <button\n                                onClick={() => {\n                                    list(\"${resource.name}\");\n                                }}\n                        >\n                            ${translateActionTitle({\n                              resource,\n                              action: \"list\",\n                              i18n,\n                            })}\n                        </button>\n                    </div>\n                    `\n                        : \"\"\n                    }\n                </div>\n                <form onSubmit={handleSubmit(onFinish)}>\n                    <div style={{ display: \"flex\", flexDirection: \"column\", gap: \"8px\" }}>\n                        ${renderedFields.join(\"\")}\n                        <div>\n                            <input type=\"submit\" value=${translateButtonTitle({\n                              action: \"save\",\n                              i18n,\n                            })} />\n                        </div>\n                    </div>\n                </form>\n            </div>\n        );\n    };\n    `;\n};\n\n/**\n * @experimental This is an experimental component\n */\nexport const EditInferencer: InferencerResultComponent = createInferencer({\n  type: \"edit\",\n  additionalScope: [\n    [\"@refinedev/react-hook-form\", \"RefineReactHookForm\", { useForm }],\n  ],\n  codeViewerComponent: SharedCodeViewer,\n  loadingComponent: LoadingComponent,\n  errorComponent: ErrorComponent,\n  renderer,\n});\n"],"mappings":"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","names":["React","useResource","React","useContext","useResource","TranslationContext","urlLikeKeyRegexp","nameLikeRegexp","getFieldableKeys","__name","key","data","fieldableProperties","nameLikeKeys","k","firstAvailable","fkey","pickNotDeprecated","pickDataProvider","resourceName","dataProviderName","resources","resource","item","meta","pickNotDeprecated","__name","dataProviderFromResource","_a","pickInferredField","__name","inferredFields","field","a","b","prettier","tsParser","prettierFormat","__name","code","prettier","tsParser","error","prettySpaces","__name","content","relationRegexp","relationInfer","__name","key","value","isRelation","isBasicValue","isBasicArray","v","removeRelationSuffix","__name","key","relationRegexp","prettyString","__name","str","removeRelationSuffix","word","translatePrettyString","__name","payload","resource","field","i18n","translate","prettedString","prettyString","pluralize","toSingular","__name","str","pluralize","pluralize","toPlural","__name","str","pluralize","translateActionTitle","__name","payload","_a","resource","action","i18n","noBraces","translateKey","prettyString","toPlural","toSingular","translateButtonTitle","__name","payload","action","i18n","noQuotes","prettyString","replaceExports","__name","code","line","packageRegex","sideEffectRegex","nameChangeRegex","replaceImports","__name","content","modules","matches","imports","match","defaultImport","namedImports","namespaceImport","packageName","importName","prettySpaces","pluralize","resourceFromInferred","__name","field","resources","el","stripped","removeRelationSuffix","pluralize","pluralize","componentName","__name","resourceName","type","fallbackResourceName","sanitized","singular","pluralize","resourceComponentName","prettyString","prettyType","handleExpression","__name","expression","jsx","strings","expressions","result","currentString","i","prepareLiveCode","__name","code","componentName","removeHiddenCode","__name","code","dotAccessableRegex","shouldDotAccess","__name","property","accessorSingle","variableName","key","accessor","base","accessorMultiple","variable","a","joiner","dotAccessor","str","printImports","__name","imports","byModule","acc","element","module","isDefault","elements","defaultImport","e","named","defaultStr","namedStr","identifierRegexp","isIDKey","__name","key","getOptionLabel","__name","field","_a","noOp","__name","arg1","getVariableName","__name","fieldKey","suffixOrPrefix","fieldKeyWithoutInvalidCharacters","prettyPluralVariableName","prettyString","getMetaProps","__name","identifier","meta","actions","_a","_b","_c","_d","metaByIdentifier","metaByActions","firstFoundedActionInMeta","action","metaByAction","gqlQuery","gqlMutation","metaValueByAction","key","metaValues","pickMeta","metaValue","acc","idQuoteWrapper","__name","id","deepHasKey","__name","obj","keys","k","composeInferencers","__name","inferencers","fieldInferencer","key","value","record","infer","type","inferences","inferencer","pickInferredField","composeTransformers","__name","transformers","fields","resources","resource","record","infer","type","acc","transformer","arrayInfer","__name","key","value","record","infer","type","isArray","isBasicArray","v","inferredInnerType","basicType","booleanInfer","__name","key","value","dayjs","dateSuffixRegexp","dateSeparators","dateInfer","__name","key","value","isDateField","dayjs","isValidDateString","s","emailRegexp","emailInfer","__name","key","value","imageRegexp","imageInfer","__name","key","value","nullishInfer","__name","key","value","numberInfer","__name","key","value","isNonEmptyString","isNotNaN","idPropertyRegexp","objectInfer","__name","key","value","record","infer","type","isNotNull","isNotArray","onlyHasId","hasId","k","fieldableKeys","getFieldableKeys","innerFieldKey","innerFieldType","accessor","el","richtextInfer","__name","key","value","textInfer","__name","key","value","urlRegexp","urlInfer","__name","key","value","defaultElements","arrayInfer","booleanInfer","dateInfer","emailInfer","imageInfer","nullishInfer","numberInfer","objectInfer","relationInfer","richtextInfer","textInfer","urlInfer","basicToRelation","__name","fields","resources","resource","record","field","validUUIdRegex","isValidUUID","value","isNotSelf","imageFieldLikeRegexp","imageByKey","__name","fields","field","relationByResource","__name","fields","resources","field","inferResource","resourceFromInferred","relationToFieldable","__name","fields","resources","resource","record","infer","type","field","value","inferredType","defaultTransformers","imageByKey","relationByResource","relationToFieldable","basicToRelation","React","RefineCore","gql","LivePreview","LiveProvider","defaultScope","React","RefineCore","gql","InferencerLiveContext","LiveComponent","__name","fetchError","code","additionalScope","ErrorComponent","sanitized","replaceExports","replaceImports","acc","packageName","variableName","_module","ignoreReplacement","scope","_packageName","packageContent","ErrorComponentWithError","error","LiveProvider","LivePreview","React","Highlight","defaultProps","theme","SharedCodeViewer","__name","rawCode","loading","code","React","prettierFormat","settled","setSettled","isModalVisible","setIsModalVisible","isVisible","setIsVisible","isColumn","setIsColumn","isModalButtonHover","setIsModalButtonHover","timeout","mediaQuery","handleResize","InfoIcon","OpenIcon","CodeModal","visible","onClose","modalRef","isCopied","setIsCopied","isCopyHover","setIsCopyHover","isCloseHover","setIsCloseHover","isLearnMoreHover","setIsLearnMoreHover","onOutsideClick","event","onCopy","title","CloseIcon","highlight","Highlight","defaultProps","theme","className","style","tokens","getLineProps","getTokenProps","line","i","token","key","ClipboardIcon","props","React","useDataProvider","useResource","useInferFetch","__name","type","resourceNameOrRouteName","idFromProps","meta","resource","idFromURL","resources","useResource","id","dataProvider","useDataProvider","error","setError","React","data","setData","datas","setDatas","initial","setInitial","loading","setLoading","resolver","recordItemId","_a","dataProviderName","dataProviderFromResource","pickDataProvider","dp","response","pickMeta","r","React","useDataProvider","get","useRelationFetch","__name","record","fields","infer","meta","dataProvider","useDataProvider","updatedFields","setUpdatedFields","React","initial","setInitial","loading","setLoading","resolver","allFields","attempts","promises","field","_a","_b","_c","_d","dataProviderName","dataProviderFromResource","dp","isMultiple","requestId","el","get","data","pickMeta","relationInfer","responseData","isPlural","toPlural","removeRelationSuffix","toSingular","resourceNameWithoutRelationSuffix","results","createInferencer","__name","type","additionalScope","customElements","fieldTransformers","renderer","LoadingComponent","ErrorComponent","CodeViewerComponent","infer","composeInferencers","defaultElements","transform","composeTransformers","defaultTransformers","Inferencer","resourceName","fieldTransformer","hideCodeViewerInProduction","meta","id","_a","_b","resource","resources","useResource","i18nProvider","useContext","TranslationContext","resourceFromURL","record","records","recordLoading","isInitialLoad","inferError","useInferFetch","inferSingleField","key","value","inferResult","transformed","customTransformedFields","field","result","inferSingleRecord","inferMultipleRecords","inferred","allUniqueKeys","index","self","mostCommonRecord","mostCommonFields","fields","acc","count","f","rawResults","recordInUse","React","results","relationLoading","useRelationFetch","clearedFields","cleanFields","idx","arr","el","duplicates","_c","_d","_e","_f","currentFieldHasResource","fieldHasResource","isSameResource","toPush","code","hiddenCodeViewer","LiveComponent","prepareLiveCode","componentName","removeHiddenCode","name","resourceItem","React","ErrorComponent","__name","error","React","React","LoadingComponent","__name","dots","setDots","React","interval","renderer","__name","resource","fields","meta","isCustomPage","id","i18n","COMPONENT_NAME","componentName","recordName","imports","deepHasKey","relationHooksCode","field","_a","_b","_c","_d","ids","accessor","getVariableName","getMetaProps","renderRelationFields","variableName","variableIsLoading","variableDataLength","jsx","translatePrettyString","mapItemName","val","cannotRender","textFields","imageFields","emailFields","urlFields","booleanFields","dateFields","richtextFields","numberFields","wrapper","code","renderedFields","canEdit","list","canList","noOp","useTranslateHook","printImports","idQuoteWrapper","translateActionTitle","translateButtonTitle","ShowInferencer","createInferencer","SharedCodeViewer","LoadingComponent","ErrorComponent","useTable","flexRender","getAccessorKey","__name","field","dotAccessor","renderer","resource","fields","meta","isCustomPage","i18n","COMPONENT_NAME","componentName","recordName","imports","deepHasKey","relationFields","relationHooksCode","_a","_b","idsString","accessor","getVariableName","getMetaProps","relationVariableNames","renderRelationFields","_c","_d","_e","variableName","id","header","translatePrettyString","accessorKey","cell","val","cannotRender","imageFields","jsx","emailFields","urlFields","booleanFields","dateFields","basicFields","canEdit","canShow","canCreate","actionButtons","translateButtonTitle","renderedFields","noOp","useTranslateHook","printImports","translateActionTitle","ListInferencer","createInferencer","useTable","flexRender","SharedCodeViewer","LoadingComponent","ErrorComponent","useForm","renderer","__name","resource","fields","meta","isCustomPage","i18n","COMPONENT_NAME","componentName","imports","deepHasKey","relationHooksCode","field","_a","_b","getVariableName","getOptionLabel","getMetaProps","renderRelationFields","variableName","jsx","translatePrettyString","toSingular","dotAccessor","accessor","basicInputFields","isIDKey","inp","booleanFields","renderedFields","canList","noOp","useTranslateHook","printImports","translateActionTitle","translateButtonTitle","CreateInferencer","createInferencer","useForm","SharedCodeViewer","LoadingComponent","ErrorComponent","useForm","renderer","__name","resource","fields","meta","isCustomPage","id","i18n","COMPONENT_NAME","componentName","recordName","getVariableName","imports","deepHasKey","relationHooksCode","field","_a","_b","val","accessor","getOptionLabel","getMetaProps","dotAccessor","renderRelationFields","variableName","jsx","translatePrettyString","toSingular","basicInputFields","valError","inp","isIDKey","booleanFields","errorVal","renderedFields","canList","noOp","useTranslateHook","printImports","idQuoteWrapper","translateActionTitle","translateButtonTitle","EditInferencer","createInferencer","useForm","SharedCodeViewer","LoadingComponent","ErrorComponent","HeadlessInferencer","__name","actionFromProps","idFromProps","props","action","id","useResource","React","ShowInferencer","CreateInferencer","EditInferencer","ListInferencer"]}