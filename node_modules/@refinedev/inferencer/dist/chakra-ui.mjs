"use client"
var Mr=Object.defineProperty;var o=(e,n)=>Mr(e,"name",{value:n,configurable:!0});import Te from"react";import{useResource as Fn}from"@refinedev/core";import{Show as $t,TagField as bt,TextField as Ft,EmailField as vt,UrlField as Ct,BooleanField as St,DateField as wt,MarkdownField as At,NumberField as Tt}from"@refinedev/chakra-ui";import{Heading as Ht,HStack as Lt,Image as Rt}from"@chakra-ui/react";import ee,{useContext as dt}from"react";import{useResource as Ue,TranslationContext as ft}from"@refinedev/core";var Vr=/(image|photo|avatar|url|logo|cover|thumbnail|icon)/i,Nr=/^(\w|\d|_|-|)*?(name|label){1}$/i,Le=o((e,n)=>{let i=["name","label","title","count","content","username","nickname","login","firstName","lastName","url"],s=Object.keys(n).filter(f=>Nr.test(f));i.push(...s),Vr.test(e)&&i.unshift("url");let p=i.find(f=>f in n&&!!n[f]);if(p)return p==="firstName"&&"lastName"in n?["firstName","lastName"]:p},"getFieldableKeys");import{pickNotDeprecated as Br}from"@refinedev/core";function Re(e,n,i){if(n)return n;let u=i==null?void 0:i.find(p=>p.name===e),s=Br(u==null?void 0:u.meta,u==null?void 0:u.options);return s!=null&&s.dataProviderName?s.dataProviderName:"default"}o(Re,"pickDataProvider");var ke=o(e=>{var n;return(n=e==null?void 0:e.options)==null?void 0:n.dataProviderName},"dataProviderFromResource");var Pe=o(e=>{let n=[...e].filter(Boolean).sort((i,u)=>(u.priority||0)-(i.priority||0))[0];return n||null},"pickInferredField");import Dr from"prettier/standalone";import Or from"prettier/parser-typescript";var Ee=o(e=>{try{return Dr.format(e,{parser:"typescript",plugins:[Or],arrowParens:"always",trailingComma:"all",semi:!0,tabWidth:4,printWidth:80})}catch(n){return console.warn("Formatting error in inferencer",n),e}},"prettierFormat");var Ze=o(e=>e.replace(/ {2,}/g," ").replace(/\n{2,}/g,`
`),"prettySpaces");var Me=/(-id|-ids|_id|_ids|Id|Ids|ID|IDs)(\[\])?$/,Ye=o((e,n)=>{let i=Me.test(e),u=typeof n=="string"||typeof n=="number",s=Array.isArray(n)&&n.every(p=>typeof p=="string"||typeof p=="number");return i&&u||i&&s?{key:e,relation:!0,multiple:s,type:"relation",priority:1}:!1},"relationInfer");var q=o(e=>e.replace(Me,""),"removeRelationSuffix");var ge=o(e=>q(e).replace(/([a-z])([A-Z])/g,"$1 $2").replace(/_/g," ").replace(/-/g," ").split(" ").map(f=>f.charAt(0).toUpperCase()+f.slice(1)).join(" "),"prettyString");var b=o(e=>{let{resource:n,field:i,i18n:u}=e;if(u){let p=`translate("${n.name}.fields.${i.key}")`;return e.noBraces?`${p}`:`{${p}}`}let s=ge(i.key);return e.noQuotes?s:`"${s}"`},"translatePrettyString");import Je from"pluralize";var _=o((e="")=>Je.isSingular(e)?e:Je.singular(e),"toSingular");import Xe from"pluralize";var oe=o((e="")=>Xe.isPlural(e)?e:Xe.plural(e),"toPlural");var Ve=o(e=>e.replace(/export\s+(const|let|var|type|interface|function|class)\s+(\w+)\s*(=|:)\s*/g,"$1 $2 = ").split(`
`).filter(s=>!s.trim().startsWith("export default")).join(`
`),"replaceExports");var er=/import(?:(?:(?:[ \n\t]+([^ *\n\t\{\},]+)[ \n\t]*(?:,|[ \n\t]+))?([ \n\t]*\{(?:[ \n\t]*[^ \n\t"'\{\}]+[ \n\t]*,?)+\})?[ \n\t]*)|[ \n\t]*\*[ \n\t]*as[ \n\t]+([^ \n\t\{\}]+)[ \n\t]+)from[ \n\t]*(?:['"])([^'"\n]+)(?:['"])(?:;?)/g,zr=/import[ \n\t](?:['"])([^'"\n]+)(?:['"])(?:;?)/g,jr=/((?:\w|\s|_)*)( as )((?:\w|\s|_)*)( |,)?/g,Ne=o((e,n={})=>{let i=e.matchAll(er),u=new Set;for(let s of i){let[,p,f,m,l]=s;if(l in n){let k=n[l];if(l==="react")continue;p&&u.add(`const { default: ${p} } = ${k};`),f&&u.add(`const${f.replace(jr,"$1: $3$4")} = ${k};`),m&&u.add(`const ${m} = ${k};`)}}return Ze(`
    ${Array.from(u).join(`
`)}
    ${e.replace(er,"").replace(zr,"")}
    `)},"replaceImports");import Ae from"pluralize";var Be=o((e,n)=>e?n.find(u=>{let s=q(e.key);return u.name===s||u.name===(Ae.isPlural(s)?s:Ae.plural(s))||u.name===(Ae.isSingular(s)?s:Ae.singular(s))}):void 0,"resourceFromInferred");import qr from"pluralize";var J=o((e,n,i="Inferred")=>{let u=e.replace(/[^a-zA-Z0-9]/g," "),s=qr.singular(u),f=ge(s).replace(/ /g,"")||i,m=n.charAt(0).toUpperCase()+n.slice(1);return/^[a-zA-Z]/.test(f)?`${f}${m}`:`${m}${f}`},"componentName");var Kr=o(e=>e?Array.isArray(e)?e.join(""):typeof e=="string"?e:typeof e=="object"||typeof e=="function"?e.toString():typeof e=="number"?String(e):typeof e=="boolean"&&e?"true":e:"","handleExpression"),$=o((e,...n)=>e.reduce((u,s,p)=>`${u}${s}${Kr(n[p])}`,"").trim(),"jsx");var De=o((e,n)=>`
    ${e??""}
    
    render(typeof ${n} !== "undefined" ? <${n} /> : <></>);
    `,"prepareLiveCode");var Oe=o(e=>e==null?void 0:e.replace(/(\/\* hidden-start \*\/)(.|\n)*?(\/\* hidden-end \*\/)/g,""),"removeHiddenCode");var Ur=/^[a-zA-Z_$][a-zA-Z_$0-9]*$/,ze=o(e=>Ur.test(e),"shouldDotAccess");function je(e,n,i){let u=`${e}`;return n&&(u+="?.",ze(n)?u+=n:u+=`['${n}']`),i&&(u+="?.",ze(i)?u+=i:u+=`['${i}']`),u}o(je,"accessorSingle");function Qr(e,n,i){return(i??[]).map(s=>je(e,n,s))}o(Qr,"accessorMultiple");var d=o((e,n,i,u=' + " " + ')=>Array.isArray(i)?u?Qr(e,n,i).join(u):je(e,n,i[0]):je(e,n,i),"accessor"),K=o((e,n,i)=>{let u=e;return n&&(u+=`.${n}`),i&&(Array.isArray(i)?u+=`.${i[0]}`:u+=`.${i}`),u},"dotAccessor");var ae=o(e=>{let n=e.reduce((u,[s,p,f])=>(u[p]||(u[p]=[]),u[p].includes(s)||(f?u[p].push([s,!0]):u[p].push(s)),u),{});return Object.entries(n).map(([u,s])=>{let p=s.find(k=>Array.isArray(k)&&k[1]),f=s.filter(k=>typeof k=="string"),m=p?`${p[0]}`:"",l=f.length?`{ ${f.join(", ")} }`:"";return`import ${m}${m&&l?", ":""}${l} from "${u}";`})},"printImports");var Gr=/^id$/i,Ie=o(e=>Gr.test(e),"isIDKey");var xe=o(e=>{var n;return e.relationInfer&&(n=e.relationInfer)!=null&&n.accessor?Array.isArray(e.relationInfer.accessor)?`optionLabel: "${e.relationInfer.accessor[0]}",`:e.relationInfer.accessor!=="title"?`optionLabel: "${e.relationInfer.accessor}",`:"":""},"getOptionLabel");var se=o(e=>{},"noOp");var P=o((e,n="")=>{if(Number.isInteger(Number(e)))return n.charAt(0).toLowerCase()+n.slice(1)+e;let u=e.replace(/^\d+/,"").replace(/[^a-zA-Z0-9]/g,"-"),s=ge(u).replace(/ /g,"");return`${s.charAt(0).toLowerCase()+s.slice(1)}${n.charAt(0).toUpperCase()+n.slice(1)}`},"getVariableName");var O=o((e,n,i)=>{var H,v,y,w;if(!(n&&i&&e)||!Object.keys(n).length)return"";let u=e?n[e]:{},s=[],p=i.find(E=>u[E]),f=u==null?void 0:u[p||"default"];if(!f)return"";let{gqlQuery:m,gqlMutation:l,...k}=f;Object.keys(k).forEach(E=>{s.push(`${E}: ${JSON.stringify(k[E])}`)}),m&&s.push(`gqlQuery: gql\`${(v=(H=m==null?void 0:m.loc)==null?void 0:H.source)==null?void 0:v.body}\``),l&&s.push(`gqlMutation: gql\`${(w=(y=l==null?void 0:l.loc)==null?void 0:y.source)==null?void 0:w.body}\``);let x=s.join(",");return x.length?`meta:{${x}}`:""},"getMetaProps"),re=o((e,n,i)=>{if(n&&i&&e){let u=e?n[e]:{},p=[...i,"default"].reduce((f,m)=>f??(u==null?void 0:u[m]),void 0);if(p)return p}},"pickMeta");var $e=o(e=>e===void 0?e:typeof e=="string"?`"${e}"`:e,"idQuoteWrapper");var te=o((e,n)=>{for(let i in e)if(n.includes(i)||typeof e[i]=="object"&&e[i]!==null&&te(e[i],n))return!0;return!1},"deepHasKey");var rr=o(e=>{let n=o((i,u,s,p=n,f)=>{let m=e.map(k=>k(i,u,s,p,f));return Pe(m)},"fieldInferencer");return n},"composeInferencers");var tr=o(e=>o((i,u,s,p,f,m)=>e.reduce((l,k)=>k(l,u,s,p,f,m),i),"fieldTransformer"),"composeTransformers");var nr=o((e,n,i,u,s)=>{let p=Array.isArray(n),f=Array.isArray(n)&&n.every(m=>typeof m=="string"||typeof m=="number");if(p){if(!f){let l=u(e,n[0],i,u,s);return l?{...l,key:e,multiple:!0,priority:1}:!1}let m=u(e,n[0],i,u,s)||{type:"string"};return{key:e,multiple:!0,priority:1,type:m==null?void 0:m.type}}return!1},"arrayInfer");var or=o((e,n)=>typeof n=="boolean"?{key:e,type:"boolean"}:!1,"booleanInfer");import ar from"dayjs";var _r=/(_at|_on|At|On|AT|ON)(\[\])?$/,Wr=["/",":","-","."],sr=o((e,n)=>{let i=_r.test(e)&&ar(n).isValid(),u=typeof n=="string"&&ar(n).isValid();return typeof n=="string"&&Wr.some(p=>n.includes(p))&&(i||u)?{key:e,type:"date",priority:1}:!1},"dateInfer");var Zr=/^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/,ir=o((e,n)=>typeof n=="string"&&Zr.test(n)?{key:e,type:"email",priority:1}:!1,"emailInfer");var Yr=/\.(gif|jpe?g|tiff?|png|webp|bmp|svg)$/i,cr=o((e,n)=>typeof n=="string"&&Yr.test(n)?{key:e,type:"image",priority:2}:!1,"imageInfer");var ur=o((e,n)=>typeof n>"u"||n===null?null:!1,"nullishInfer");var pr=o((e,n)=>{let i=typeof n=="string"&&n.length>0,u=!Number.isNaN(Number(n));return i&&u||typeof n=="number"?{key:e,type:"number"}:!1},"numberInfer");var mr=/id$/i,lr=o((e,n,i,u,s)=>{let p=n!==null,f=!Array.isArray(n);if(p&&f&&typeof n=="object"){let l=Object.keys(n).length===1&&mr.test(Object.keys(n)[0]),k=Object.keys(n).some(v=>mr.test(v));if(l)return{key:e,type:"relation",relation:!0,accessor:"id",priority:1};let x=Le(e,n);if((x?x.length>0:!1)&&x){let v=x&&Array.isArray(x)?x[0]:x,y=u(v,n[v],n,u,s);if(y){let w=Array.isArray(x)?x.map(E=>y.accessor?`${E}.${Array.isArray(y.accessor)?y.accessor[0]:y.accessor}`:E):y.accessor?Array.isArray(y.accessor)?`${x}.${y.accessor[0]}`:`${x}.${y.accessor}`:x;return(y==null?void 0:y.type)==="text"&&(s==="create"||s==="edit")&&k?{key:e,type:"relation",relation:!0,accessor:"id",priority:1}:{...y,fieldable:!0,key:e,accessor:w,priority:1}}}return{key:e,fieldable:!1,type:"object",priority:1}}return!1},"objectInfer");var dr=o((e,n)=>typeof n=="string"&&n.length>100?{key:e,type:"richtext",priority:1}:!1,"richtextInfer");var fr=o((e,n)=>typeof n=="string"?{key:e,type:"text"}:!1,"textInfer");var Jr=/^(https?|ftp):\/\/(-\.)?([^\s/?\.#-]+\.?)+(\/[^\s]*)?$/i,gr=o((e,n)=>typeof n=="string"&&Jr.test(n)?{key:e,type:"url",priority:1}:!1,"urlInfer");var yr=[nr,or,sr,ir,cr,ur,pr,lr,Ye,dr,fr,gr];var hr=o((e,n,i,u)=>e.map(p=>{if(!p.relation&&(p.type==="text"||p.type==="richtext"||p.type==="number")&&!p.canRelation){let f=/^[a-z0-9-]+$/,m=o(v=>f.test(`${v}`),"isValidUUID"),l=p.key.toLowerCase()!=="id";return!(!p.accessor||typeof p.accessor=="string")||!l?p:(p.multiple?u[p.key]:[u[p.key]]).every(v=>m(p.accessor?v[p.accessor]:v))?{...p,canRelation:!0}:p}return p}),"basicToRelation");var Xr=/(image|photo|avatar|cover|thumbnail|icon)/i,kr=o(e=>e.map(i=>i.type==="url"&&Xr.test(i.key)?{...i,type:"image"}:i),"imageByKey");var Ir=o((e,n)=>e.map(u=>{let s=Be(u,n);return s?{...u,relation:!0,type:"relation",resource:s}:u}),"relationByResource");var xr=o((e,n,i,u,s,p)=>e.map(m=>{if(m.relation&&m.type==="relation"&&!m.resource){let l=m.accessor?u[m.key][m.accessor]:u[m.key],k=s(m.key,l,u,s,p);if(k&&k.type!=="relation")return{...m,fieldable:!0,relation:!1,type:k.type,canRelation:!0}}return m}),"relationToFieldable");var $r=[kr,Ir,xr,hr];import X from"react";import*as et from"@refinedev/core";import*as rt from"graphql-tag";import{LivePreview as tt,LiveProvider as nt}from"@aliemir/react-live";var br=[["react","React",X],["@refinedev/core","RefineCore",et],["graphql-tag","GraphqlTag",rt]],qe=X.createContext({}),Ke=o(({fetchError:e,code:n,additionalScope:i,errorComponent:u})=>{let s=(n&&Ve(Ne(n,[...br,...i??[]].reduce((m,[l,k,x,H])=>H?m:{...m,[l]:k},{}))))??"",p=X.useMemo(()=>({React:X,...X,...[...br,...i??[]].reduce((m,[l,k,x])=>({...m,[k]:x}),{})}),[i]),f=X.useMemo(()=>o(()=>{let{error:l}=X.useContext(qe);return u?X.createElement(u,{error:l?`<p>An error occured while rendering the generated component.You can check the generated code from the below "Show Code" button and fix the error manually.</p>
                                    <p>If you think this is a bug, please report the issue at <a target="_blank" rel="noopener noreferrer" href="https://github.com/refinedev/refine/issues">https://github.com/refinedev/refine/issues</a></p>
                                    <p>Exception:</p>
                                    <code>${l}</code>`:typeof e=="string"?e:e?`<p>Something went wrong while fetching the resource data.</p>
                                    <p>To learn more about the Inferencer, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`:void 0}):null},"LiveErrorComponent"),[u,e]);return X.createElement(nt,{Context:qe,code:s,scope:p,noInline:!0},!e&&X.createElement(tt,{Context:qe}),X.createElement(f,null))},"LiveComponent");import g from"react";import ot,{defaultProps as at}from"prism-react-renderer";import st from "prism-react-renderer/themes/vsDark/index.js";var ue=o(({code:e,loading:n})=>{let i=g.useMemo(()=>Ee(e??""),[e]),[u,s]=g.useState(!1),[p,f]=g.useState(!1),[m,l]=g.useState(!1),[k,x]=g.useState(!1),[H,v]=g.useState(!1);return g.useEffect(()=>{if(!n){let y=setTimeout(()=>{s(!0)},300);return()=>{clearTimeout(y)}}return()=>{}},[n]),g.useEffect(()=>{if(typeof window<"u"){let y=window.matchMedia("(max-width: 449px)");y.matches?l(!1):l(!0);let w=o(()=>{y.matches?l(!1):l(!0)},"handleResize");return window.addEventListener("resize",w),()=>{window.removeEventListener("resize",w)}}return()=>{}},[]),g.useEffect(()=>{if(typeof window<"u"){let y=window.matchMedia("(max-width: 1280px)");y.matches?x(!0):x(!1);let w=o(()=>{y.matches?x(!0):x(!1)},"handleResize");return window.addEventListener("resize",w),()=>{window.removeEventListener("resize",w)}}return()=>{}},[]),i&&!n?g.createElement(g.Fragment,null,m&&g.createElement("div",{className:"refine-inferencer--code-viewer",style:{position:"sticky",bottom:"24px",paddingTop:"24px",left:0,right:0,width:"100%",zIndex:10,display:"flex",justifyContent:"center",transition:"all 0.2s ease",opacity:u&&!p?1:0,transform:u&&!p?"translateY(0)":"translateY(100px)"}},g.createElement("div",{style:{width:"calc(100% - calc(64px * 2))",maxWidth:"1080px",padding:"20px",backgroundColor:"#1A1A1A",boxShadow:"0px 4px 16px -4px rgba(0, 0, 0, 0.5), 0px 8px 32px -8px rgba(0, 0, 0, 0.35)",borderRadius:"16px",display:"flex",alignItems:"center",justifyContent:"space-between",flexDirection:k?"column":"row",gap:"12px"}},g.createElement("div",{style:{display:"flex",alignItems:"flex-start",gap:"8px"}},g.createElement("div",null,g.createElement(ct,null)),g.createElement("div",{style:{fontSize:"14px",lineHeight:"20px",color:"#ffffff"}},g.createElement("p",{style:{padding:0,margin:0}},"Most of the page code is auto-generated by the"," ",g.createElement("span",{style:{textDecoration:"underline"}},"Inferencer")," ","feature, based on your backend data structure."),g.createElement("p",{style:{padding:0,margin:0}},"While this is an excellent way to experiment with refine,"," ",g.createElement("span",{style:{fontWeight:600}},"it's not intended to be used on production.")))),g.createElement("div",null,g.createElement("button",{onPointerEnter:()=>v(!0),onPointerLeave:()=>v(!1),onClick:()=>f(!0),style:{appearance:"none",border:"none",padding:"10px 16px",borderRadius:"4px",display:"flex",alignItems:"center",justifyContent:"center",background:"#0080FF",color:"#ffffff",fontSize:"14px",lineHeight:"20px",fontWeight:600,gap:"8px",cursor:"pointer",transition:"all 0.2s ease",transform:H?"scale(1.025)":void 0,filter:H?"brightness(1.1)":void 0}},g.createElement(vr,{style:{flexShrink:0}}),g.createElement("span",null,"Show the auto-generated code"))))),g.createElement(it,{visible:p,onClose:()=>f(!1),code:i})):null},"SharedCodeViewer"),it=o(({visible:e,onClose:n,code:i=""})=>{let u=g.useRef(null),[s,p]=g.useState(!1),[f,m]=g.useState(!1),[l,k]=g.useState(!1),[x,H]=g.useState(!1);g.useEffect(()=>{if(typeof document<"u"){let a=o(I=>{u.current&&!u.current.contains(I.target)&&n()},"onOutsideClick");return document.addEventListener("pointerdown",a),()=>{document.removeEventListener("pointerdown",a)}}return()=>{}},[n]);let v=o(()=>{typeof navigator<"u"&&(navigator.clipboard.writeText(i),p(!0),setTimeout(()=>{p(!1)},1e3))},"onCopy"),y=g.createElement("div",{style:{display:"flex",justifyContent:"space-between",alignItems:"center"}},g.createElement("div",{style:{fontWeight:700,fontSize:"20px",lineHeight:"32px",color:"#0D0D0D"}},"Auto-generated code by Inferencer"),g.createElement("button",{onClick:n,onPointerEnter:()=>k(!0),onPointerLeave:()=>k(!1),style:{flexShrink:0,appearance:"none",border:"none",background:"none",padding:0,margin:0,outline:"none",borderRadius:"50px",width:"32px",height:"32px",cursor:"pointer",transition:"all 0.15s ease",transform:l?"scale(1.05)":void 0,filter:l?"brightness(0.8)":void 0}},g.createElement(ut,null))),w=g.createElement("div",{style:{fontSize:"13px",borderRadius:"8px",flex:"1",overflow:"scroll",background:"#1E1E1E"}},g.createElement(ot,{...at,theme:st,code:i,language:"tsx"},({className:a,style:I,tokens:c,getLineProps:V,getTokenProps:M})=>g.createElement("pre",{className:a,style:{...I,padding:"14px 14px 14px 14px",margin:"0",width:"100%",boxSizing:"border-box"}},c.map((S,B)=>g.createElement("div",{key:B,...V({line:S,key:B})},S.map((N,t)=>g.createElement("span",{key:t,...M({token:N,key:t})})))))));return g.createElement("div",{className:"refine-inferencer--code-viewer-modal",style:{position:"fixed",top:0,left:0,right:0,bottom:0,zIndex:9999,backgroundColor:"rgba(0, 0, 0, 0.5)",transition:"all 0.2s ease",opacity:e?1:0,pointerEvents:e?"all":"none",display:"flex",justifyContent:"center",alignItems:"center"}},g.createElement("div",{ref:u,style:{transform:e?"scale(1) translateY(0px)":"scale(0) translateY(-200px)",transition:"all 0.25s cubic-bezier(.35,1.29,.81,1.08)",transitionDelay:"0.25",width:"calc(100% - calc(32px * 2))",height:"calc(100% - calc(32px * 2))",backgroundColor:"#fff",maxWidth:"640px",maxHeight:"720px",borderRadius:"8px",padding:"16px"}},g.createElement("div",{style:{display:"flex",flexDirection:"column",height:"100%",width:"100%",gap:"16px"}},y,w,g.createElement("div",{style:{display:"flex",justifyContent:"flex-start",alignItems:"flex-end",gap:"16px"}},g.createElement("button",{onPointerEnter:()=>m(!0),onPointerLeave:()=>m(!1),onClick:v,style:{appearance:"none",height:"40px",border:"none",padding:"10px 16px",borderRadius:"4px",display:"flex",alignItems:"center",justifyContent:"center",background:"#0080FF",color:"#ffffff",fontSize:"14px",lineHeight:"20px",fontWeight:600,gap:"8px",cursor:"pointer",position:"relative",overflow:"hidden",transition:"filter 0.2s ease",transform:f?"scale(1.025)":"scale(1)",filter:f?"brightness(1.1)":void 0}},g.createElement(Fr,{style:{flexShrink:0,marginTop:"-2px",marginBottom:"-2px"}}),g.createElement("span",null,"Copy Generated Code"),g.createElement("div",{style:{position:"absolute",width:"100%",height:"100%",top:0,left:0,display:"flex",alignItems:"center",justifyContent:"center",background:"#0080FF",transition:"all 0.2s ease",transform:s?"translateY(0)":"translateY(40px)"}},g.createElement(Fr,{style:{flexShrink:0,marginTop:"-2px",marginBottom:"-2px"}}),g.createElement("span",null,"Copied!"))),g.createElement("a",{onPointerEnter:()=>H(!0),onPointerLeave:()=>H(!1),href:"https://refine.dev/docs/packages/documentation/inferencer",target:"_blank",rel:"noreferrer",style:{appearance:"none",textDecoration:"none",border:"none",padding:"10px 16px",borderRadius:"4px",display:"flex",alignItems:"center",justifyContent:"center",background:"rgba(0, 128, 255, 0.1)",color:"#0080FF",fontSize:"14px",lineHeight:"20px",fontWeight:600,gap:"8px",cursor:"pointer",transition:"all 0.2s ease",transform:x?"scale(1.025)":void 0,filter:x?"brightness(1.1)":void 0}},g.createElement(vr,{style:{flexShrink:0}}),g.createElement("span",null,"Learn more about inferencer"))))))},"CodeModal"),ct=o(e=>g.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:20,height:20,fill:"none",...e},g.createElement("path",{fill:"#0080FF",fillRule:"evenodd",d:"M10 20C4.477 20 0 15.523 0 10S4.477 0 10 0s10 4.477 10 10-4.477 10-10 10Zm0-15a1.25 1.25 0 1 0 0 2.5A1.25 1.25 0 0 0 10 5Zm0 10c.69 0 1.25-.56 1.25-1.25V10a1.25 1.25 0 1 0-2.5 0v3.75c0 .69.56 1.25 1.25 1.25Z",clipRule:"evenodd"})),"InfoIcon"),vr=o(e=>g.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:16,height:16,fill:"none",...e},g.createElement("path",{fill:"currentColor",d:"M5 2a1 1 0 0 1 0 2H4v8h8v-1a1 1 0 1 1 2 0v1a2 2 0 0 1-2 2H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h1Z"}),g.createElement("path",{fill:"currentColor",d:"M9 2a1 1 0 0 0 0 2h1.586L6.293 8.293a1 1 0 0 0 1.414 1.414L12 5.414V7a1 1 0 1 0 2 0V3a1 1 0 0 0-1-1H9Z"})),"OpenIcon"),ut=o(e=>g.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:32,height:32,fill:"none",...e},g.createElement("path",{fill:"#A6A6A6",fillRule:"evenodd",d:"M16 32C7.163 32 0 24.837 0 16S7.163 0 16 0s16 7.163 16 16-7.163 16-16 16Zm-2.586-21.414a2 2 0 1 0-2.828 2.828L13.172 16l-2.586 2.586a2 2 0 1 0 2.828 2.828L16 18.828l2.586 2.586a2 2 0 1 0 2.828-2.828L18.828 16l2.586-2.586a2 2 0 1 0-2.828-2.828L16 13.172l-2.586-2.586Z",clipRule:"evenodd"})),"CloseIcon"),Fr=o(e=>g.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:20,height:20,viewBox:"0 0 24 24",fill:"none",...e},g.createElement("path",{fill:"currentColor",fillRule:"evenodd",d:"M8 5a3 3 0 0 0 3 3h2a3 3 0 0 0 3-3h1a2 2 0 0 1 2 2v11a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V7a2 2 0 0 1 2-2h1Zm0 7a1 1 0 0 1 1-1h6a1 1 0 1 1 0 2H9a1 1 0 0 1-1-1Zm1 3a1 1 0 1 0 0 2h4a1 1 0 1 0 0-2H9Z",clipRule:"evenodd"}),g.createElement("path",{fill:"currentColor",d:"M13 4a1 1 0 1 1 0 2h-2a1 1 0 1 1 0-2h2Z"})),"ClipboardIcon");import fe from"react";import{useDataProvider as pt,useResource as mt}from"@refinedev/core";var Cr=o((e,n,i,u)=>{let{resource:s,id:p,resources:f}=mt(n),m=i??p,l=pt(),[k,x]=fe.useState(void 0),[H,v]=fe.useState(void 0),[y,w]=fe.useState(void 0),[E,a]=fe.useState(!0),[I,c]=fe.useState(!1),V=fe.useCallback(async M=>{var N;let S=ke(s)??Re(s==null?void 0:s.name,void 0,f),B=l(S);c(!0),x(void 0);try{if((e==="list"||e==="create")&&s){let t=await B.getList({resource:s==null?void 0:s.name,meta:re((s==null?void 0:s.identifier)??(s==null?void 0:s.name),u,["getList"])}),h=(N=t.data)==null?void 0:N[0];h||x(`<p>No records/data found for resource "${s==null?void 0:s.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),v(h),w(t.data),setTimeout(()=>{c(!1)},500)}if((e==="edit"||e==="show")&&M&&s){let h=(await B.getOne({resource:s==null?void 0:s.name,id:M,meta:re((s==null?void 0:s.identifier)??(s==null?void 0:s.name),u,["getOne"])})).data;h||x(`<p>No records/data found for resource "${s==null?void 0:s.name}".</p>
                            <p>Please check your data provider and resource.</p>
                            <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),v(h),setTimeout(()=>{c(!1)},500)}}catch(t){console.warn("An error occured while fetching the resource data. Please check the error message below:",t),x(`<p>Something went wrong while fetching the resource data.</p>
                    <p>Please check your data provider and API for resource "${s==null?void 0:s.name}".</p>
                    <p>For more info, please check the <a href="https://refine.dev/docs/packages/documentation/inferencer/" target="_blank">documentation</a>.</p>`),setTimeout(()=>{c(!1)},500)}},[e,l,s,f]);return fe.useEffect(()=>{a(!1),!I&&!H&&V(m)},[V,m]),{data:H,datas:y,loading:I,initial:E,error:k}},"useInferFetch");import be from"react";import{useDataProvider as lt}from"@refinedev/core";import Sr from"lodash-es/get.js";var wr=o(({record:e,fields:n,infer:i,meta:u})=>{let s=lt(),[p,f]=be.useState([]),[m,l]=be.useState(!0),[k,x]=be.useState(!1),H=be.useCallback(async v=>{console.groupCollapsed("@refinedev/inferencer is trying to detect relations");let y=[];x(!0);try{let w=v.map(async a=>{var I,c,V,M;if(a&&(a.relation||a.canRelation)&&e){if(a.relationInfer)return a;let S=ke(a.resource),B=s(S),N=a.multiple,t=Array.isArray(a.accessor)?void 0:a.multiple?e[a.key].map(h=>a.accessor?Sr(h,a.accessor):h)[0]:a.accessor?Sr(e[a.key],a.accessor):e[a.key];if(t&&a.resource)try{let h={};if(N&&B.getMany){let{data:j}=await B.getMany({resource:a.resource.name,ids:[t],meta:re(((I=a.resource)==null?void 0:I.identifier)??((c=a.resource)==null?void 0:c.name),u,["getMany"])});h=j==null?void 0:j[0]}else{let{data:j}=await B.getOne({resource:a.resource.name,id:t,meta:re(((V=a.resource)==null?void 0:V.identifier)??((M=a.resource)==null?void 0:M.name),u,N?["getMany","getOne"]:["getOne"])});h=j}y.push({status:"success",resource:a.resource.name,field:a.key});let U=i("__",h,{},i);return{...a,relationInfer:U}}catch{return y.push({status:"error",resource:a.resource.name,field:a.key}),{...a,relationInfer:null}}if(t){let h,U;try{let C={};if(N&&B.getMany){let{data:F}=await B.getMany({resource:oe(q(a.key)),ids:[t],meta:re(oe(q(a.key)),u,["getMany"])});C=F==null?void 0:F[0]}else{let{data:F}=await B.getOne({resource:oe(q(a.key)),id:t,meta:re(oe(q(a.key)),u,N?["getMany","getOne"]:["getOne"])});C=F}y.push({status:"success",resource:oe(q(a.key)),field:a.key}),h=C,U=!0}catch{y.push({status:"error",resource:oe(q(a.key)),field:a.key});let F={};try{if(N&&B.getMany){let{data:A}=await B.getMany({resource:_(q(a.key)),meta:re(_(q(a.key)),u,["getMany"]),ids:[t]});F=A==null?void 0:A[0]}else{let{data:A}=await B.getOne({resource:_(q(a.key)),meta:re(_(q(a.key)),u,N?["getMany","getOne"]:["getOne"]),id:t});F=A}y.push({status:"success",resource:_(q(a.key)),field:a.key}),h=F,U=!1}catch{return y.push({status:"error",resource:_(q(a.key)),field:a.key}),{...a,relationInfer:null}}}let j=i("__",h,{},i),r=q(a.key);return{...a,relation:!0,type:"relation",resource:{name:U?oe(r):_(r)},fieldable:!1,canRelation:void 0,relationInfer:j}}return{...a,relationInfer:null}}return a}),E=await Promise.all(w);f(E.filter(a=>a)),setTimeout(()=>{x(!1)},500)}catch{setTimeout(()=>{x(!1)},500)}setTimeout(()=>{console.log(`Tried to detect relations with ${y.length} attempts and succeeded with ${y.filter(w=>w.status==="success").length} attempts.`),console.groupEnd(),console.info("@refinedev/inferencer may send multiple requests to your API for nonexistent resources when trying to detect relations. To learn more about how the inferencer works, visit https://s.refine.dev/how-inferencer-works")},500)},[s,e]);return be.useEffect(()=>{l(!1),!k&&n&&n.length>0&&p.length===0&&H(n)},[H,k,n,H]),{fields:p,loading:k,initial:m}},"useRelationFetch");var pe=o(({type:e,additionalScope:n=[],customElements:i=[],fieldTransformers:u=[],renderer:s,loadingComponent:p,errorComponent:f,codeViewerComponent:m})=>{let l=rr([...yr,...i]),k=tr([...$r,...u]),x=o(({resourceName:v,fieldTransformer:y,hideCodeViewerInProduction:w,meta:E,id:a})=>{var Ce,Se;let{resource:I,resources:c}=Ue(v),{i18nProvider:V}=dt(ft),{resource:M}=Ue(),{data:S,datas:B,loading:N,initial:t,error:h}=Cr(e,v??(I==null?void 0:I.name),a,E),U=o((R,L,W)=>{let Z=l(R,L,W,l,e);if(Z&&I){let Y=k([Z],c,I,W,l,e),z=y?Y.flatMap(D=>{let G=y(D);return G?[G]:[]}):Y;return z==null?void 0:z[0]}},"inferSingleField"),j=o(R=>Object.keys(R).map(W=>{let Z=R[W];return U(W,Z,R)}).filter(Boolean),"inferSingleRecord"),r=o(R=>{let L=R.map(D=>j(D)),W=R.flatMap(D=>Object.keys(D)).filter((D,G,ye)=>ye.indexOf(D)===G),Z={},Y=W.map(D=>{let G=L.map(ie=>ie.find(ne=>ne.key===D));return G.reduce((ie,ne,we)=>{if(!ne)return ie;let he=G.filter(ce=>(ce==null?void 0:ce.key)===ne.key&&(ce==null?void 0:ce.type)===ne.type).length;return he>ie.count?(Z[D]=R[we][D],{count:he,field:ne}):ie},{count:0,field:void 0}).field});return{commonRecord:Z,inferredFields:Y}},"inferMultipleRecords"),[C,F]=ee.useMemo(()=>{if(B&&(e==="list"||e==="create")){let R=r(B);return[R.inferredFields,R.commonRecord]}if(S){let R=Object.keys(S).map(L=>{let W=S[L];return l(L,W,S,l,e)}).filter(Boolean);if(I){let L=k(R,c,I,S,l,e);return[y?L.flatMap(Z=>{let Y=y(Z);return Y?[Y]:[]}):L,S]}return[[],S]}return[[],void 0]},[S,B,c,I,y]),{fields:A,loading:T}=wr({record:F,fields:C,infer:l,meta:E}),Q=ee.useMemo(()=>{let R=[];return A.forEach((L,W,Z)=>{if(L.resource){if(R.findIndex(z=>{var D,G;return((D=z.resource)==null?void 0:D.name)===((G=L.resource)==null?void 0:G.name)})>-1)return;let Y=Z.filter((z,D)=>{var G,ye,ie,ne,we,he;if(D!==W){let ce=L.resource,Pr=z.resource,Er=((G=z.resource)==null?void 0:G.identifier)||((ye=L.resource)==null?void 0:ye.identifier)?((ie=z.resource)==null?void 0:ie.identifier)===((ne=L.resource)==null?void 0:ne.identifier):((we=z.resource)==null?void 0:we.name)===((he=L.resource)==null?void 0:he.name);return ce&&Pr&&Er}return!1});if(Y.length>0)if(e==="create"||e==="edit"){let z;[L,...Y].find(D=>{D.fieldable!==!0&&z===void 0&&(z=D)}),z?R.push(z):R.push(L)}else{let z;[L,...Y].find(D=>{D.fieldable!==!1&&z===void 0&&(z=D)}),z?R.push(z):R.push(L)}else R.push(L)}else R.push(L)}),R},[A,e]),ve=ee.useMemo(()=>!N&&!T&&!t&&I?s({resource:I,resources:c,fields:Q,infer:l,meta:E,isCustomPage:I.name!==(M==null?void 0:M.name),id:a,i18n:!!V}):"",[I,c,Q,N,T]),He=w;return ee.createElement(ee.Fragment,null,p&&(N||T)&&ee.createElement(p,null),!N&&!T&&ee.createElement(ee.Fragment,null,ee.createElement(Ke,{fetchError:!N&&h?h:!N&&!t&&!S,code:De(ve,J(((Ce=I==null?void 0:I.meta)==null?void 0:Ce.label)??((Se=I==null?void 0:I.options)==null?void 0:Se.label)??(I==null?void 0:I.label)??(I==null?void 0:I.name)??"Resource",e)),errorComponent:f,additionalScope:n}),typeof m<"u"&&!He?ee.createElement(m,{code:Oe(ve),loading:N||T}):null))},"Inferencer");return o(({name:v,resource:y,fieldTransformer:w,meta:E,hideCodeViewerInProduction:a,id:I})=>{let{resource:c}=Ue(y??v),V=`${(c==null?void 0:c.identifier)??(c==null?void 0:c.name)}-${e}-${I}`;return ee.createElement(x,{hideCodeViewerInProduction:a,fieldTransformer:w,resourceName:y??v,meta:E??{},key:V,id:I})},"InferencerComponent")},"createInferencer");import Fe from"react";import{Center as gt,Alert as yt,AlertIcon as ht,AlertDescription as kt}from"@chakra-ui/react";var me=o(({error:e})=>e?Fe.createElement(gt,{style:{minHeight:300}},Fe.createElement(yt,{status:"error",variant:"subtle",flexDirection:"column",alignItems:"center",justifyContent:"center",textAlign:"center",height:"200px",maxWidth:"700px"},Fe.createElement(ht,{boxSize:"40px",mr:0}),Fe.createElement(kt,{mt:4,maxWidth:"sm"},Fe.createElement("div",{dangerouslySetInnerHTML:{__html:e??""}})))):null,"ErrorComponent");import Ar from"react";import{Box as It,Spinner as xt}from"@chakra-ui/react";var le=o(()=>Ar.createElement(It,{position:"relative",bg:"chakra-body-bg",minH:120},Ar.createElement(xt,{position:"absolute",top:"50%",left:"50%",transform:"translate(-50%, -50%)"})),"LoadingComponent");var Tr=o(({resource:e,fields:n,meta:i,isCustomPage:u,id:s,i18n:p})=>{let f=J(e.label??e.name,"show"),m="record",l=[["useShow","@refinedev/core"],["Show","@refinedev/chakra-ui"],["Heading","@chakra-ui/react"]];p&&l.push(["useTranslate","@refinedev/core"]),te(i||{},["gqlQuery","gqlMutation"])&&l.push(["gql","graphql-tag",!0]);let H=n.filter(t=>(t==null?void 0:t.relation)&&!(t!=null&&t.fieldable)&&(t==null?void 0:t.resource)).filter(Boolean).map(t=>{var h,U,j,r;if(t!=null&&t.relation&&!t.fieldable&&t.resource){if(t.multiple){l.push(["useMany","@refinedev/core"]);let C=d(m,t.key);return t.accessor&&(C=`${d(m,t.key)}?.map((item: any) => ${d("item",void 0,t.accessor)})`),`
                const { data: ${P(t.key,"Data")}, isLoading: ${P(t.key,"IsLoading")} } =
                useMany({
                    resource: "${t.resource.name}",
                    ids: ${C} || [],
                    queryOptions: {
                        enabled: !!${m} && !!${C}?.length,
                    },
                    ${O(((h=t==null?void 0:t.resource)==null?void 0:h.identifier)??((U=t==null?void 0:t.resource)==null?void 0:U.name),i,["getMany"])}
                });
                `}return l.push(["useOne","@refinedev/core"]),`
                const { data: ${P(t.key,"Data")}, isLoading: ${P(t.key,"IsLoading")} } =
                useOne({
                    resource: "${t.resource.name}",
                    id: ${d(m,t.key,t.accessor,!1)} || "",
                    queryOptions: {
                        enabled: !!${m},
                    },
                    ${O(((j=t==null?void 0:t.resource)==null?void 0:j.identifier)??((r=t==null?void 0:t.resource)==null?void 0:r.name),i,["getOne"])}
                });
            `}}).filter(Boolean),v=o(t=>{if(t.relation&&t.resource){let h=P(t.key,"Data"),U=P(t.key,"IsLoading");if(t.multiple){let j=`${d(m,t.key)}?.length`;return l.push(["TagField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),$`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                {${U} && ${j} ? <>Loading...</> : (
                    <>
                    ${(()=>{var r;if(t.relationInfer){if((r=t.relationInfer)!=null&&r.accessor){if(Array.isArray(t.relationInfer.accessor))return console.log("@refinedev/inferencer: Inferencer failed to render this field",{key:t.key,relation:t.relationInfer}),'<span title="Inferencer failed to render this field. (Unsupported nesting)">Cannot Render</span>';let C=P(t.key),F=d(C,void 0,t.relationInfer.accessor);return`{record?.${t.key}?.length ? <HStack spacing="12px">{${h}?.data?.map((${C}: any) => <TagField key={${F}} value={${F}} />)}</HStack> : <></>}`}return console.log("@refinedev/inferencer: Inferencer failed to render this field",{key:t.key,relation:t.relationInfer}),'<span title="Inferencer failed to render this field. (Cannot find key)">Cannot Render</span>'}return console.log("@refinedev/inferencer: Inferencer failed to render this field",{key:t.key}),'<span title="Inferencer failed to render this field (Cannot find relation)">Cannot Render</span>'})()}
                    </>
                )}
                `}return t.fieldable?$`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <TextField value={${d(m,t.key,t.accessor)}} />
                `:$`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                {${U} ? <>Loading...</> : (
                    <>
                    ${(()=>{var j,r,C;if(t.relationInfer){if((j=t.relationInfer)!=null&&j.accessor)return Array.isArray(t.relationInfer.accessor)?`{${d(`${h}?.data`,void 0,t.relationInfer.accessor,' + " " + ')}}`:`{${h}?.data?.${t.relationInfer.accessor}}`;let F=((r=t==null?void 0:t.relationInfer)==null?void 0:r.type)==="object"&&!((C=t==null?void 0:t.relationInfer)!=null&&C.accessor);return F&&console.log("@refinedev/inferencer: Inferencer failed to render this field",{key:t.key,relation:t.relationInfer}),F?'<span title="Inferencer failed to render this field. (Cannot find key)">Cannot Render</span>':`{${h}?.data}`}return`{${h}?.data?.id}`})()}
                    </>
                )}
                
                `}},"renderRelationFields"),y=o(t=>{if(t.type==="text"){if(l.push(["TagField","@refinedev/chakra-ui"],["TextField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <HStack spacing="12px">
                {${d(m,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <TextField value={${d(m,t.key,t.accessor)}} />
            `}},"textFields"),w=o(t=>{if(t.type==="image"){if(l.push(["Image","@chakra-ui/react"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                {${d(m,t.key)}?.map((item: any) => (
                    <Image sx={{ maxWidth: 200 }} src={${h}} key={${h}} />
                ))}
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <Image sx={{ maxWidth: 200 }} src={${d(m,t.key,t.accessor," + ")}} />
                `}},"imageFields"),E=o(t=>{if(t.type==="email"){if(l.push(["TagField","@refinedev/chakra-ui"],["EmailField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <HStack spacing="12px">
                {${d(m,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <EmailField value={${d(m,t.key,t.accessor," + ")}} />
            `}},"emailFields"),a=o(t=>{if(t.type==="url"){if(l.push(["TagField","@refinedev/chakra-ui"],["UrlField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <HStack spacing="12px">
                {${d(m,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <UrlField value={${d(m,t.key,t.accessor," + ")}} />
            `}},"urlFields"),I=o(t=>{if(t.type==="boolean"){if(l.push(["TagField","@refinedev/chakra-ui"],["BooleanField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <HStack spacing="12px">
                {${d(m,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <BooleanField value={${d(m,t.key,t.accessor," && ")}} />
            `}},"booleanFields"),c=o(t=>{if(t.type==="date"){if(l.push(["DateField","@refinedev/chakra-ui"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                {${d(m,t.key)}?.map((item: any) => (
                    <DateField value={${h}} key={${h}} />
                ))}
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <DateField value={${d(m,t.key,t.accessor," + ' ' + ")}} />
            `}},"dateFields"),V=o(t=>{if(t.type==="richtext")return l.push(["MarkdownField","@refinedev/chakra-ui"]),$`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <MarkdownField value={${d(m,t.key,t.accessor,' + " " + ')}} />
            `},"richtextFields"),M=o(t=>{if(t.type==="number"){if(l.push(["NumberField","@refinedev/chakra-ui"],["TagField","@refinedev/chakra-ui"],["HStack","@chakra-ui/react"]),t.multiple){let h=d("item",void 0,t.accessor);return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <HStack spacing="12px">
                {${d(m,t.key)}?.map((item: any) => (
                    <TagField value={${h}} key={${h}} />
                ))}
                </HStack>
            `}return $`
                <Heading as="h5" size="sm" mt={4}>${b({resource:e,field:t,i18n:p,noQuotes:!0})}</Heading>
                <NumberField value={${d(m,t.key,t.accessor,' + " " + ')} ?? ""} />
            `}},"numberFields"),S=o(t=>{if(t)return $`
                ${t}
            `},"wrapper"),B=n.map(t=>{switch(t==null?void 0:t.type){case"text":return S(y(t));case"number":return S(M(t));case"richtext":return S(V(t));case"email":return S(E(t));case"image":return S(w(t));case"date":return S(c(t));case"boolean":return S(I(t));case"url":return S(a(t));case"relation":return S(v(t));default:return}});se(l);let N=p&&"const translate = useTranslate();";return $`
    ${ae(l)}
    
    export const ${f} = () => {
        ${N}
        const { query } = useShow(${u?`{ 
                    resource: "${e.name}", 
                    id: ${$e(s)},
                    ${O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["getOne"])}
                }`:O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["getOne"])?`{ ${O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["getOne"])} }`:""});
        const { data, isLoading } = query;

        const ${m} = data?.data;
    
        ${H}

        return (
            <Show isLoading={isLoading}>
                ${B.join("")}
            </Show>
        );
    };
    `},"renderer"),Qe=pe({type:"show",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",{Show:$t,TagField:bt,TextField:Ft,EmailField:vt,UrlField:Ct,BooleanField:St,DateField:wt,MarkdownField:At,NumberField:Tt}],["@chakra-ui/react","ChakraUI",{Heading:Ht,HStack:Lt,Image:Rt}]],codeViewerComponent:ue,loadingComponent:le,errorComponent:me,renderer:Tr});import{List as Pt,usePagination as Et,TagField as Mt,EmailField as Vt,UrlField as Nt,BooleanField as Bt,DateField as Dt,MarkdownField as Ot,EditButton as zt,ShowButton as jt,DeleteButton as qt}from"@refinedev/chakra-ui";import{TableContainer as Kt,Table as Ut,Thead as Qt,Tr as Gt,Th as _t,Tbody as Wt,Td as Zt,HStack as Yt,Button as Jt,IconButton as Xt,Box as en,Image as rn}from"@chakra-ui/react";import{useTable as tn}from"@refinedev/react-table";import{flexRender as nn}from"@tanstack/react-table";import{IconChevronRight as on,IconChevronLeft as an}from"@tabler/icons-react";var de=o(e=>Array.isArray(e.accessor)||e.multiple?`accessorKey: "${e.key}"`:e.accessor?`accessorKey: "${K(e.key,void 0,e.accessor)}"`:`accessorKey: "${e.key}"`,"getAccessorKey"),Hr=o(({resource:e,fields:n,meta:i,isCustomPage:u,i18n:s})=>{let p=J(e.label??e.name,"list"),f="tableData?.data",m=[["useTable","@refinedev/react-table"],["ColumnDef","@tanstack/react-table"],["flexRender","@tanstack/react-table"],["List","@refinedev/chakra-ui"],["TableContainer","@chakra-ui/react"],["Table","@chakra-ui/react"],["Thead","@chakra-ui/react"],["Tr","@chakra-ui/react"],["Th","@chakra-ui/react"],["Tbody","@chakra-ui/react"],["Td","@chakra-ui/react"],["HStack","@chakra-ui/react"],["Button","@chakra-ui/react"],["IconButton","@chakra-ui/react"],["usePagination","@refinedev/chakra-ui"],["Box","@chakra-ui/react"],["IconChevronRight","@tabler/icons-react"],["IconChevronLeft","@tabler/icons-react"]];s&&m.push(["useTranslate","@refinedev/core"]),te(i||{},["gqlQuery","gqlMutation"])&&m.push(["gql","graphql-tag",!0]);let k=n.filter(r=>(r==null?void 0:r.relation)&&!(r!=null&&r.fieldable)&&(r==null?void 0:r.resource)),x=k.filter(Boolean).map(r=>{var C,F;if(r!=null&&r.relation&&!r.fieldable&&r.resource){m.push(["GetManyResponse","@refinedev/core"]),m.push(["useMany","@refinedev/core"]);let A="";return r.multiple?A=`[].concat(...(${f}?.map((item) => ${d("item",r.key,r.accessor,!1)}) ?? []))`:A=`${f}?.map((item) => ${d("item",r.key,r.accessor,!1)}) ?? []`,`
                const { data: ${P(r.key,"Data")} } =
                useMany({
                    resource: "${r.resource.name}",
                    ids: ${A},
                    queryOptions: {
                        enabled: !!${f},
                    },
                    ${O(((C=r==null?void 0:r.resource)==null?void 0:C.identifier)??((F=r==null?void 0:r.resource)==null?void 0:F.name),i,["getMany"])}
                });
                `}}).filter(Boolean),H=k==null?void 0:k.map(r=>{if(r!=null&&r.resource)return P(r.key,"Data")}).filter(Boolean),v=o(r=>{var C,F,A,T,Q;if(r.relation&&r.resource){let ve=`${P(r.key,"Data")}?.data`;if(Array.isArray(r.accessor))return;let He=`id: "${r.key}"`,Ce=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,Se=de(r),R="";if(r.multiple){m.push(["TagField","@refinedev/chakra-ui"]);let L="item";if(r!=null&&r.relationInfer&&(L=d("item",void 0,r.relationInfer.accessor)),r!=null&&r.relationInfer&&((C=r==null?void 0:r.relationInfer)==null?void 0:C.type)==="object"&&!((F=r==null?void 0:r.relationInfer)!=null&&F.accessor))return console.log("@refinedev/inferencer: Inferencer failed to render this field",{key:r.key,relation:r.relationInfer}),`cell: function render({ getValue }) {
                        return (
                            <span title="Inferencer failed to render this field (Cannot find key)">Cannot Render</span>
                        )
                    }`;R=`cell: function render({ getValue, table }) {
                    const meta = table.options.meta as {
                        ${P(r.key,"Data")}: GetManyResponse;
                    };

                    const ${P(r.key,"")} = getValue<any[]>()?.map((item) => {
                        return meta.${P(r.key,"Data")}?.data?.find(
                            (resourceItems) => resourceItems.id === ${d("item",void 0,r.accessor)}
                        );
                    })


                    return (
                        <HStack>
                            {${P(r.key,"")}?.map((item, index) => (
                                <TagField key={index} value={${L}} />
                            ))}
                        </HStack>
                    )
                }
            `}else if(r!=null&&r.relationInfer){let L=((A=r==null?void 0:r.relationInfer)==null?void 0:A.type)==="object"&&!((T=r==null?void 0:r.relationInfer)!=null&&T.accessor);L||console.log("@refinedev/inferencer: Inferencer failed to render this field",{key:r.key,relation:r.relationInfer}),R=`cell: function render({ getValue, table }) {
                        const meta = table.options.meta as {
                            ${P(r.key,"Data")}: GetManyResponse;
                        };

                        const ${P(r.key,"")} = meta.${ve}?.find(
                            (item) => item.id == getValue<any>(),
                        );

                        return ${L?'<span title="Inferencer failed to render this field (Cannot find key)">Cannot Render</span>':`${d(P(r.key),void 0,(Q=r==null?void 0:r.relationInfer)==null?void 0:Q.accessor)} ?? "Loading..."`};
                    },`}else R="";return`
                {
                    ${He},
                    ${Ce},
                    ${Se},
                    ${R}
                }
            `}},"renderRelationFields"),y=o(r=>{if(r.type==="image"){m.push(["Image","@chakra-ui/react"]);let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T=$`
                cell: function render({ getValue }) {
                    ${r!=null&&r.accessor?"try {":""}
                        return <Image sx={{ maxWidth: "100px" }} src={${d("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                    ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                }
            `;if(r.multiple){let Q=d("item",void 0,r.accessor," + ");T=`
                    cell: function render({ getValue }) {
                        ${r!=null&&r.accessor?"try {":""}
                            return (
                                <HStack>
                                    {getValue<any[]>()?.map((item, index) => (
                                        <Image src={${Q}} key={index} sx={{ height: "50px", maxWidth: "100px" }} />
                                    ))}
                                </HStack>
                            )
                        ${r!=null&&r.accessor?" } catch (error) { return null; }":""}
                    }
                `}return`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"imageFields"),w=o(r=>{if(r.type==="email"){m.push(["EmailField","@refinedev/chakra-ui"]);let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T=$`
                cell: function render({ getValue }) {
                    return <EmailField value={${d("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}} />
                }
            `;return r.multiple&&(m.push(["TagField","@refinedev/chakra-ui"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"emailFields"),E=o(r=>{if(r.type==="url"){m.push(["UrlField","@refinedev/chakra-ui"]);let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T=$`
                cell: function render({ getValue }) {
                    return <UrlField value={${d("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                }
            `;return r.multiple&&(m.push(["TagField","@refinedev/chakra-ui"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"urlFields"),a=o(r=>{if((r==null?void 0:r.type)==="boolean"){m.push(["BooleanField","@refinedev/chakra-ui"]);let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T=$`
                cell: function render({ getValue }) {
                    return <BooleanField value={${d("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0," + ")}} />
                }
            `;return r.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <BooleanField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"booleanFields"),I=o(r=>{if(r.type==="date"){m.push(["DateField","@refinedev/chakra-ui"]);let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T=$`
                cell: function render({ getValue }) {
                    return <DateField value={${d("getValue<any>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0,' + " " + ')}} />
                }
            `;return r.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <DateField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"dateFields"),c=o(r=>{if((r==null?void 0:r.type)==="richtext"){m.push(["MarkdownField","@refinedev/chakra-ui"]);let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T=$`
                cell: function render({ getValue }) {
                    return <MarkdownField value={(${d("getValue<string>()",void 0,Array.isArray(r.accessor)?r.accessor:void 0)})?.slice(0, 80) + "..." } />
                }
            `;return r.multiple&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<string[]>()?.map((item, index) => (
                                    <MarkdownField value={${d("item",void 0,r.accessor," + ")}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"richtextFields"),V=o(r=>{if(r&&(r.type==="text"||r.type==="number")){let C=`id: "${r.key}"`,F=de(r),A=`header: ${b({resource:e,field:r,i18n:s,noBraces:!0})}`,T="";return r.multiple&&(m.push(["TagField","@refinedev/chakra-ui"]),T=`
                    cell: function render({ getValue }) {
                        return (
                            <HStack>
                                {getValue<any[]>()?.map((item, index) => (
                                    <TagField value={${d("item",void 0,r.accessor,' + " " + ')}} key={index} />
                                ))}
                            </HStack>
                        )
                    }
                `),!r.multiple&&Array.isArray(r.accessor)&&(T=`
                    cell: function render({ getValue }) {
                        return (
                            <>{${d("getValue<any>()",r.key,r.accessor)}}</>
                        );
                    }
                `),`
                {
                    ${C},
                    ${F},
                    ${A},
                    ${T}
                }
            `}},"basicFields"),{canEdit:M,canShow:S,canDelete:B,meta:N}=e??{},t=B||(N==null?void 0:N.canDelete);M&&m.push(["EditButton","@refinedev/chakra-ui"]),S&&m.push(["ShowButton","@refinedev/chakra-ui"]),t&&m.push(["DeleteButton","@refinedev/chakra-ui"]);let h=M||S||t?$`
    {
        id: "actions",
        accessorKey: "id",
        header: "Actions",
        cell: function render({ getValue }) {
            return (
                <HStack>
                ${S?$`
                    <ShowButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${M?$`
                    <EditButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                    ${t?$`
                    <DeleteButton
                        hideText
                        recordItemId={getValue() as string}
                    />
                    `:""}
                </HStack>
            );
        },
    },
        `:"",U=n.map(r=>{switch(r==null?void 0:r.type){case"text":case"number":return V(r);case"richtext":return c(r);case"email":return w(r);case"image":return y(r);case"date":return I(r);case"boolean":return a(r);case"url":return E(r);case"relation":return v(r);default:return}});se(m);let j=s&&"const translate = useTranslate();";return $`
    import React from "react";
    ${ae(m)}
    
    export const ${p} = () => {
        ${j}
        const columns = React.useMemo<ColumnDef<any>[]>(() => [
            ${[...U,h].filter(Boolean).join(",")}
        ], [${s?"translate":""}]);

        const {
            getHeaderGroups,
            getRowModel,
            setOptions,
            refineCore: {
                setCurrent,
                pageCount,
                current,
                tableQueryResult: { data: tableData },
            },
        } = useTable({
            columns,
            ${u?`
            refineCoreProps: {
                resource: "${e.name}",
                ${O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["getList"])}
            }
            `:O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["getList"])?`refineCoreProps: { ${O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["getList"])} },`:""}
            
        });

        ${x}

        setOptions((prev) => ({
            ...prev,
            meta: {
                ...prev.meta,
                ${H.join(", ")}
            },
        }));

        return (
            <List>
                <TableContainer whiteSpace="pre-line">
                    <Table variant="simple">
                        <Thead>
                            {getHeaderGroups().map((headerGroup) => (
                                <Tr key={headerGroup.id}>
                                    {headerGroup.headers.map((header) => (
                                        <Th key={header.id}>
                                            {!header.isPlaceholder && (
                                                flexRender(
                                                    header.column.columnDef
                                                        .header,
                                                    header.getContext(),
                                                )
                                            )}
                                        </Th>
                                    ))}
                                </Tr>
                            ))}
                        </Thead>
                        <Tbody>
                            {getRowModel().rows.map((row) => (
                                <Tr key={row.id}>
                                    {row.getVisibleCells().map((cell) => (
                                        <Td key={cell.id}>
                                            {flexRender(
                                                cell.column.columnDef.cell,
                                                cell.getContext(),
                                            )}
                                        </Td>
                                    ))}
                                </Tr>
                            ))}
                        </Tbody>
                    </Table>
                </TableContainer>
                <Pagination
                    current={current}
                    pageCount={pageCount}
                    setCurrent={setCurrent}
                />
            </List>   
        );
    };

    type PaginationProps = {
        current: number;
        pageCount: number;
        setCurrent: (page: number) => void;
    };

    const Pagination: React.FC<PaginationProps> = ({
        current,
        pageCount,
        setCurrent,
    }) => {
        const pagination = usePagination({
            current,
            pageCount,
        });
    
        return (
            <Box display="flex" justifyContent="flex-end">
                <HStack my="3" spacing="1">
                    {pagination?.prev && (
                        <IconButton
                            aria-label="previous page"
                            onClick={() => setCurrent(current - 1)}
                            disabled={!pagination?.prev}
                            variant="outline"
                        >
                            <IconChevronLeft size="18" />
                        </IconButton>
                    )}
    
                    {pagination?.items.map((page) => {
                        if (typeof page === "string")
                            return <span key={page}>...</span>;
    
                        return (
                            <Button
                                key={page}
                                onClick={() => setCurrent(page)}
                                variant={page === current ? "solid" : "outline"}
                            >
                                {page}
                            </Button>
                        );
                    })}
                    {pagination?.next && (
                        <IconButton
                            aria-label="next page"
                            onClick={() => setCurrent(current + 1)}
                            variant="outline"
                        >
                            <IconChevronRight size="18" />
                        </IconButton>
                    )}
                </HStack>
            </Box>
        );
    };
    `},"renderer"),Ge=pe({type:"list",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",{List:Pt,usePagination:Et,TagField:Mt,EmailField:Vt,UrlField:Nt,BooleanField:Bt,DateField:Dt,MarkdownField:Ot,EditButton:zt,ShowButton:jt,DeleteButton:qt}],["@refinedev/react-table","RefineReactTable",{useTable:tn}],["@tabler/icons-react","TablerIcons",{IconChevronRight:on,IconChevronLeft:an}],["@chakra-ui/react","ChakraUI",{TableContainer:Kt,Table:Ut,Thead:Qt,Tr:Gt,Th:_t,Tbody:Wt,Td:Zt,HStack:Yt,Button:Jt,IconButton:Xt,Box:en,Image:rn}],["@tanstack/react-table","TanstackReactTable",{flexRender:nn}]],codeViewerComponent:ue,loadingComponent:le,errorComponent:me,renderer:Hr});import{Create as sn}from"@refinedev/chakra-ui";import{FormControl as cn,FormLabel as un,FormErrorMessage as pn,Select as mn,Input as ln,Checkbox as dn}from"@chakra-ui/react";import{useForm as fn}from"@refinedev/react-hook-form";var Lr=o(({resource:e,fields:n,meta:i,isCustomPage:u,i18n:s})=>{let p=J(e.label??e.name,"create"),f=[["Create","@refinedev/chakra-ui"],["FormControl","@chakra-ui/react"],["FormLabel","@chakra-ui/react"],["FormErrorMessage","@chakra-ui/react"],["useForm","@refinedev/react-hook-form"]];s&&f.push(["useTranslate","@refinedev/core"]),te(i||{},["gqlQuery","gqlMutation"])&&f.push(["gql","graphql-tag",!0]);let k=n.filter(a=>(a==null?void 0:a.relation)&&!(a!=null&&a.fieldable)&&(a==null?void 0:a.resource)).filter(Boolean).map(a=>{var I,c;if(a!=null&&a.relation&&!a.fieldable&&a.resource)return f.push(["useSelect","@refinedev/core"]),`
                const { options: ${P(a.key,"Options")} } =
                useSelect({
                    resource: "${a.resource.name}",
                    ${xe(a)}
                    ${O(((I=a==null?void 0:a.resource)==null?void 0:I.identifier)??((c=a==null?void 0:a.resource)==null?void 0:c.name),i,["getList"])}
                });
            `}).filter(Boolean),x=o(a=>{if(a.relation&&a.resource){f.push(["useSelect","@refinedev/core"]),f.push(["Select","@chakra-ui/react"]);let I=P(a.key,"Options");return $`
            <FormControl mb="3" isInvalid={!!errors?.${K(a.key,void 0)}}>
                <FormLabel>${b({resource:e,field:a,i18n:s,noQuotes:!0})}</FormLabel>
                <Select
                    placeholder="Select ${_(a.resource.name)}"
                    {...register("${K(a.key,void 0,a.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${I}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${d("(errors as any)",a.key,a.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},"renderRelationFields"),H=o(a=>{if(a.type==="text"||a.type==="url"||a.type==="email"||a.type==="number"||a.type==="date"||a.type==="richtext")return Ie(a.key)||(f.push(["Input","@chakra-ui/react"]),a.multiple)?void 0:$`
                <FormControl mb="3" isInvalid={!!${d("(errors as any)",a.key,a.accessor,!1)}}>
                    <FormLabel>${b({resource:e,field:a,i18n:s,noQuotes:!0})}</FormLabel>
                    <Input
                        ${a.type!=="date"&&a.type!=="richtext"?`type="${a.type}"`:""}
                        {...register("${K(a.key,void 0,a.accessor)}", {
                            required: "This field is required",
                            ${a.type==="number"?"valueAsNumber: true,":""}
                        })}
                    />
                    <FormErrorMessage>
                        {${d("(errors as any)",a.key,a.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `},"basicInputFields"),v=o(a=>{if(a.type==="boolean")return f.push(["Checkbox","@chakra-ui/react"]),a.multiple?void 0:$`
                <FormControl mb="3" isInvalid={!!${d("errors",a.key,a.accessor,!1)}}>
                    <FormLabel>${b({resource:e,field:a,i18n:s,noQuotes:!0})}</FormLabel>
                    <Checkbox
                        {...register("${K(a.key,void 0,a.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${d("errors",a.key,a.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `},"booleanFields"),y=o(a=>{if(a.type==="date")return`
                {/* 
                    DatePicker component is not included in "@refinedev/chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${H(a)??""}
                `},"dateFields"),w=n.map(a=>{switch(a==null?void 0:a.type){case"text":case"number":case"email":case"url":case"richtext":return H(a);case"date":return y(a);case"boolean":return v(a);case"relation":return x(a);default:return}});se(f);let E=s&&"const translate = useTranslate();";return $`
    ${ae(f)}
    
    export const ${p} = () => {
        ${E}
        const {
            refineCore: { formLoading },
            saveButtonProps,
            register,
            formState: { errors },
        } = useForm(
            ${u?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    action: "create",
                    ${O(e.identifier??e.name,i,["create","getOne"])}
                }
            }`:O(e.identifier??e.name,i,["create","getOne"])?`{
                        refineCoreProps: { ${O(e.identifier??e.name,i,["create","getOne"])} }
                        }`:""}
        );
    
        ${k}

        return (
            <Create isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${w.join("")}
            </Create>
        );
    };
    `},"renderer"),_e=pe({type:"create",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",{Create:sn}],["@refinedev/react-hook-form","RefineReactHookForm",{useForm:fn}],["@chakra-ui/react","ChakraUI",{FormControl:cn,FormLabel:un,FormErrorMessage:pn,Select:mn,Input:ln,Checkbox:dn}]],codeViewerComponent:ue,loadingComponent:le,errorComponent:me,renderer:Lr});import{Edit as gn}from"@refinedev/chakra-ui";import{FormControl as yn,FormLabel as hn,FormErrorMessage as kn,Select as In,Input as xn,Checkbox as $n}from"@chakra-ui/react";import{useForm as bn}from"@refinedev/react-hook-form";var Rr=o(({resource:e,fields:n,meta:i,isCustomPage:u,id:s,i18n:p})=>{let f=J(e.label??e.name,"edit"),m=P(e.label??e.name,"Data"),l=[["React","react",!0],["Edit","@refinedev/chakra-ui"],["FormControl","@chakra-ui/react"],["FormLabel","@chakra-ui/react"],["FormErrorMessage","@chakra-ui/react"],["useForm","@refinedev/react-hook-form"]];p&&l.push(["useTranslate","@refinedev/core"]),te(i||{},["gqlQuery","gqlMutation"])&&l.push(["gql","graphql-tag",!0]);let H=n.filter(c=>(c==null?void 0:c.relation)&&!(c!=null&&c.fieldable)&&(c==null?void 0:c.resource)).filter(Boolean).map(c=>{var V,M;if(c!=null&&c.relation&&!c.fieldable&&c.resource){l.push(["useSelect","@refinedev/core"]);let S=d(m,c.key,c.accessor,!1);return c.multiple&&c.accessor&&(S=`${d(m,c.key)}?.map((item: any) => ${d("item",void 0,c.accessor)})`),`
                const { options: ${P(c.key,"Options")} } =
                useSelect({
                    resource: "${c.resource.name}",
                    defaultValue: ${S},
                    ${xe(c)}
                    ${O(((V=c==null?void 0:c.resource)==null?void 0:V.identifier)??((M=c==null?void 0:c.resource)==null?void 0:M.name),i,["getList"])}
                });

                React.useEffect(() => {
                    setValue("${K(c.key,void 0,c.accessor)}", ${S});
                }, [${P(c.key,"Options")}]);
            `}}).filter(Boolean),v=o(c=>{if(c.relation&&c.resource){l.push(["useSelect","@refinedev/core"]),l.push(["Select","@chakra-ui/react"]);let V=P(c.key,"Options");return $`
            <FormControl mb="3" isInvalid={!!errors?.${K(c.key,void 0)}}>
                <FormLabel>${b({resource:e,field:c,i18n:p,noQuotes:!0})}</FormLabel>
                <Select
                    placeholder="Select ${_(c.resource.name)}"
                    {...register("${K(c.key,void 0,c.accessor)}", {
                        required: "This field is required",
                    })}
                >
                    {${V}?.map((option) => (
                        <option value={option.value} key={option.value}>
                            {option.label}
                        </option>
                    ))}
                </Select>
                <FormErrorMessage>
                    {${d("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                </FormErrorMessage>
            </FormControl>
            `}},"renderRelationFields"),y=o(c=>{if(c.type==="text"||c.type==="url"||c.type==="email"||c.type==="number"||c.type==="date"||c.type==="richtext"){if(l.push(["Input","@chakra-ui/react"]),c.multiple){let V=K(c.key,"${index}",c.accessor),M=d(`${d("(errors as any)",c.key,void 0,!1)}?.[index]`,void 0,c.accessor);return`
                    <>
                        {${d(m,c.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${M}}>
                                <FormLabel>${b({resource:e,field:c,i18n:p,noQuotes:!0})}</FormLabel>
                                <Input
                                    {...register(\`${V}\`, {
                                        required: "This field is required",
                                        ${c.type==="number"?"valueAsNumber: true,":""}
                                    })}
                                />
                                <FormErrorMessage>
                                    {${d(M,"message")} as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return $`
                <FormControl mb="3" isInvalid={!!${d("(errors as any)",c.key,c.accessor,!1)}}>
                    <FormLabel>${b({resource:e,field:c,i18n:p,noQuotes:!0})}</FormLabel>
                    <Input
                        ${Ie(c.key)?"disabled":""}
                        ${c.type!=="date"&&c.type!=="richtext"?`type="${c.type}"`:""}
                        {...register("${K(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                            ${c.type==="number"?"valueAsNumber: true,":""}
                        })}
                    />
                    <FormErrorMessage>
                        {${d("(errors as any)",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
            `}},"basicInputFields"),w=o(c=>{if(c.type==="boolean"){if(l.push(["Checkbox","@chakra-ui/react"]),c.multiple){let V=K(c.key,void 0,c.accessor),M=`${d("(errors as any)",c.key,void 0,!1)}?.[index]`;return`
                    <>
                        {${d(m,c.key)}?.map((item: any, index: number) => (
                            <FormControl key={index} mb="3" isInvalid={!!${M}}>
                                <FormLabel>${b({resource:e,field:c,i18n:p,noQuotes:!0})}</FormLabel>
                                <Checkbox
                                    {...register(\`${V}.\${index}\`, {
                                        required: "This field is required",
                                    })}
                                />
                                <FormErrorMessage>
                                    {${M}?.message as string}
                                </FormErrorMessage>
                            </FormControl>
                        ))}
                    </>
                `}return $`
                <FormControl mb="3" isInvalid={!!${d("errors",c.key,c.accessor,!1)}}>
                    <FormLabel>${b({resource:e,field:c,i18n:p,noQuotes:!0})}</FormLabel>
                    <Checkbox
                        {...register("${K(c.key,void 0,c.accessor)}", {
                            required: "This field is required",
                        })}
                    />
                    <FormErrorMessage>
                        {${d("errors",c.key,c.accessor,!1)}?.message as string}
                    </FormErrorMessage>
                </FormControl>
               
            `}},"booleanFields"),E=o(c=>{if(c.type==="date")return`
                {/* 
                    DatePicker component is not included in "@refinedev/chakra-ui" package.
                    To use a <DatePicker> component, you can examine the following links:
                    
                    - https://github.com/aboveyunhai/chakra-dayzed-datepicker
                    - https://github.com/wojtekmaj/react-date-picker
                */}
                ${y(c)}
                `},"dateFields"),a=n.map(c=>{switch(c==null?void 0:c.type){case"text":case"number":case"email":case"url":case"richtext":return y(c);case"date":return E(c);case"boolean":return w(c);case"relation":return v(c);default:return}});se(l);let I=p&&"const translate = useTranslate();";return $`
    ${ae(l)}
    
    export const ${f} = () => {
        ${I}
        const {
            refineCore: { formLoading, query },
            saveButtonProps,
            register,
            setValue,
            formState: { errors },
        } = useForm(
            ${u?`
            { 
                refineCoreProps: {
                    resource: "${e.name}",
                    id: ${$e(s)},
                    action: "edit",
                    ${O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["update","getOne"])}
                }
            }`:O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["update","getOne"])?`{ refineCoreProps: { ${O((e==null?void 0:e.identifier)??(e==null?void 0:e.name),i,["update","getOne"])} }
                        }`:""}
        );
    
        const ${m} = query?.data?.data;
    
        ${H}

        return (
            <Edit isLoading={formLoading} saveButtonProps={saveButtonProps}>
                ${a.join("")}
            </Edit>
        );
    };
    `},"renderer"),We=pe({type:"edit",additionalScope:[["@refinedev/chakra-ui","RefineChakraUI",{Edit:gn}],["@refinedev/react-hook-form","RefineReactHookForm",{useForm:bn}],["@chakra-ui/react","ChakraUI",{FormControl:yn,FormLabel:hn,FormErrorMessage:kn,Select:In,Input:xn,Checkbox:$n}]],codeViewerComponent:ue,loadingComponent:le,errorComponent:me,renderer:Rr});var ec=o(({action:e,id:n,...i})=>{let{action:u,id:s}=Fn();switch(e??u){case"show":return Te.createElement(Qe,{...i,id:n??s});case"create":return Te.createElement(_e,{...i,id:n??s});case"edit":return Te.createElement(We,{...i,id:n??s});default:return Te.createElement(Ge,{...i,id:n??s})}},"ChakraUIInferencer");export{_e as ChakraUICreateInferencer,Lr as ChakraUICreateRenderer,We as ChakraUIEditInferencer,Rr as ChakraUIEditRenderer,ec as ChakraUIInferencer,Ge as ChakraUIListInferencer,Hr as ChakraUIListRenderer,Qe as ChakraUIShowInferencer,Tr as ChakraUIShowRenderer};
//# sourceMappingURL=chakra-ui.mjs.map